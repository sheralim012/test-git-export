0
00:00:00,000 --> 00:00:00,000


1
00:00:00,000 --> 00:00:01,000
So let me talk about correction.

2
00:00:01,000 --> 00:00:12,000
So we have the family of errors on at most, d

3
00:00:12,000 --> 00:00:15,000
minus 1 over 2 bits.

4
00:00:15,000 --> 00:00:18,000


5
00:00:18,000 --> 00:00:35,000
And the decoding is going to be output the nearest codeword.

6
00:00:35,000 --> 00:00:38,000


7
00:00:38,000 --> 00:00:49,000
And so suppose that we start with a code word x.

8
00:00:49,000 --> 00:00:55,000


9
00:00:55,000 --> 00:00:57,000
The noise maps this to some corrupted code word.

10
00:00:57,000 --> 00:01:01,000
Sorry, yeah, corrupted code word x tilde.

11
00:01:01,000 --> 00:01:01,000
So not a code word.

12
00:01:01,000 --> 00:01:02,000
Code word plus noise.

13
00:01:02,000 --> 00:01:05,000


14
00:01:05,000 --> 00:01:14,000
Our promise on the noise is that the distance is at most, d

15
00:01:14,000 --> 00:01:18,000
minus 1 over 2.

16
00:01:18,000 --> 00:01:24,000
And then, we're going to output the nearest code word.

17
00:01:24,000 --> 00:01:28,000
So if you look at this picture, the distance between these code

18
00:01:28,000 --> 00:01:28,000
words--

19
00:01:28,000 --> 00:01:29,000
maybe I'll draw it again.

20
00:01:29,000 --> 00:01:35,000


21
00:01:35,000 --> 00:01:38,000
We're promised that the distance that we move

22
00:01:38,000 --> 00:01:42,000
is less than half the distance between code words.

23
00:01:42,000 --> 00:01:45,000
So if we draw balls of radius d minus 1 over 2

24
00:01:45,000 --> 00:01:51,000
around each code word, if I drew it better,

25
00:01:51,000 --> 00:01:54,000
these balls should be disjoint.

26
00:01:54,000 --> 00:01:55,000
Right?

27
00:01:55,000 --> 00:01:58,000
Each code word has some ball around it,

28
00:01:58,000 --> 00:02:00,000
which should uniquely decode to that code.

29
00:02:00,000 --> 00:02:03,000


30
00:02:03,000 --> 00:02:06,000
So if we pick the nearest code word, it should be unambiguous.

31
00:02:06,000 --> 00:02:09,000
We should only get back the coder that we started from.

32
00:02:09,000 --> 00:02:12,000


33
00:02:12,000 --> 00:02:15,000
Let me just say that again in math.

34
00:02:15,000 --> 00:02:29,000
So let y equal argmin y and c, distance of y to x tilde.

35
00:02:29,000 --> 00:02:33,000
So y is the closest code word to x tilde.

36
00:02:33,000 --> 00:02:43,000


37
00:02:43,000 --> 00:02:50,000
Then we'll use the distance guarantee.

38
00:02:50,000 --> 00:02:50,000
Oh, sorry.

39
00:02:50,000 --> 00:02:54,000
Here d is the minimum distance between distinct code words.

40
00:02:54,000 --> 00:03:03,000
So suppose that y is not equal to x.

41
00:03:03,000 --> 00:03:08,000
So suppose we make a decoding error.

42
00:03:08,000 --> 00:03:12,000
In other words, y and x are distinct codewords.

43
00:03:12,000 --> 00:03:16,000
Then, if they're distinct code words,

44
00:03:16,000 --> 00:03:18,000
we know their distance is at least d.

45
00:03:18,000 --> 00:03:27,000
So we can write d is less than or equal to the distance

46
00:03:27,000 --> 00:03:28,000
between x and y.

47
00:03:28,000 --> 00:03:31,000


48
00:03:31,000 --> 00:03:37,000
And the next step is we're using this intuition

49
00:03:37,000 --> 00:03:39,000
about balls being distinct.

50
00:03:39,000 --> 00:03:41,000
That distance, kind of implicit in it,

51
00:03:41,000 --> 00:03:45,000
is the triangle inequality, that if there's some point in here

52
00:03:45,000 --> 00:03:47,000
and it's close to one code word, it had better

53
00:03:47,000 --> 00:03:48,000
be far from the others.

54
00:03:48,000 --> 00:03:50,000
So we can use the triangle inequality here

55
00:03:50,000 --> 00:03:53,000
to write this distance is less than

56
00:03:53,000 --> 00:04:00,000
or equal to the distance of x to x tilde plus the distance

57
00:04:00,000 --> 00:04:05,000
of x tilde to y.

58
00:04:05,000 --> 00:04:05,000
OK?

59
00:04:05,000 --> 00:04:10,000
So here's my x tilde.

60
00:04:10,000 --> 00:04:15,000
If I go from here, x to x tilde to y,

61
00:04:15,000 --> 00:04:17,000
it's longer than going straight from x to y.

62
00:04:17,000 --> 00:04:20,000


63
00:04:20,000 --> 00:04:22,000
So let me label these points.

64
00:04:22,000 --> 00:04:28,000
x, x tilde, y.

65
00:04:28,000 --> 00:04:34,000
And now, we know that x and x tilde are promised to be close.

66
00:04:34,000 --> 00:04:42,000
So this is at most d minus 1 over 2

67
00:04:42,000 --> 00:04:44,000
plus the distance of x tilde to y.

68
00:04:44,000 --> 00:04:47,000


69
00:04:47,000 --> 00:04:49,000
OK?

70
00:04:49,000 --> 00:04:52,000
And now, what do we have left?

71
00:04:52,000 --> 00:04:56,000
We have d is less than or equal to this expression right here.

72
00:04:56,000 --> 00:04:58,000
We rearrange.

73
00:04:58,000 --> 00:05:01,000
We get the distance of x tilde to y

74
00:05:01,000 --> 00:05:07,000
is bigger than d plus 1 over 2

75
00:05:07,000 --> 00:05:11,000
And so what that means, this is now a contradiction.

76
00:05:11,000 --> 00:05:23,000
So this contradicts y being the closest code word.

77
00:05:23,000 --> 00:05:26,000
Because x had distance of d minus 1 over 2.

78
00:05:26,000 --> 00:05:31,000
And so if y is further away, it couldn't be the closest code

79
00:05:31,000 --> 00:05:33,000
word.

80
00:05:33,000 --> 00:05:37,000
And this is really just restating,

81
00:05:37,000 --> 00:05:40,000
in math and equations, this logic

82
00:05:40,000 --> 00:05:43,000
of these balls being distinct.

83
00:05:43,000 --> 00:05:46,000


84
00:05:46,000 --> 00:05:48,000
And what does that mean?

85
00:05:48,000 --> 00:05:50,000
It means I have this family of errors,

86
00:05:50,000 --> 00:05:53,000
but that most d minus 1 over 2 bit flips,

87
00:05:53,000 --> 00:05:57,000
and I have a decoding strategy, decoding strategy works.

88
00:05:57,000 --> 00:05:59,000
It recovers the correct code.

89
00:05:59,000 --> 00:06:04,000


90
00:06:04,000 --> 00:06:05,000
Any questions about that?

91
00:06:05,000 --> 00:06:08,000


92
00:06:08,000 --> 00:06:12,000
So conversely, yeah, go ahead.

93
00:06:12,000 --> 00:06:16,000
If you had d plus or d minus why [INAUDIBLE]

94
00:06:16,000 --> 00:06:19,000
Why is this d plus 1 over 2?

95
00:06:19,000 --> 00:06:20,000
Yeah.

96
00:06:20,000 --> 00:06:24,000
What I did was I subtracted d minus 1 over 2 from both sides.

97
00:06:24,000 --> 00:06:27,000
So that left me here with a distance of x tilde to y.

98
00:06:27,000 --> 00:06:33,000
And then I got d minus paren d minus 1 over 2.

99
00:06:33,000 --> 00:06:35,000
So I get this.

100
00:06:35,000 --> 00:06:37,000
Good.

101
00:06:37,000 --> 00:06:40,000
OK, this shows me I can correct that many errors.

102
00:06:40,000 --> 00:06:54,000
Conversely, d over 2 errors cannot be corrected.

103
00:06:54,000 --> 00:06:57,000


104
00:06:57,000 --> 00:06:57,000
Right?

105
00:06:57,000 --> 00:07:00,000
So if I have 2 code words that have distance d,

106
00:07:00,000 --> 00:07:03,000
and I'm allowed to go halfway in between them,

107
00:07:03,000 --> 00:07:04,000
things are now ambiguous.

108
00:07:04,000 --> 00:07:08,000
The closest code word, I can't distinguish which one is which.

109
00:07:08,000 --> 00:07:12,000
Or it could be maybe if d is odd, then it could be worse.

110
00:07:12,000 --> 00:07:16,000
I could unambiguously return the wrong code word.

111
00:07:16,000 --> 00:07:20,000
So I can correct just fewer than d over 2 errors,

112
00:07:20,000 --> 00:07:23,000
but once I hit d over 2, it's no longer correctable.

113
00:07:23,000 --> 00:07:26,000
So what I said here, that the error correcting performance

114
00:07:26,000 --> 00:07:29,000
is really described in terms of this single number,

115
00:07:29,000 --> 00:07:30,000
that is what I meant.

116
00:07:30,000 --> 00:07:33,000
If you know d, you've nailed down

117
00:07:33,000 --> 00:07:35,000
how well you can correct worst case errors.

118
00:07:35,000 --> 00:07:40,000


119
00:07:40,000 --> 00:07:50,000
And before I go on, I just want to mention random errors

120
00:07:50,000 --> 00:07:51,000
or structured.

121
00:07:51,000 --> 00:07:54,000


122
00:07:54,000 --> 00:07:56,000
These errors can look very different.

123
00:07:56,000 --> 00:08:02,000
So this single parameter is beautiful in terms

124
00:08:02,000 --> 00:08:03,000
of its simplicity.

125
00:08:03,000 --> 00:08:06,000


126
00:08:06,000 --> 00:08:11,000
It doesn't always give you the full picture.

127
00:08:11,000 --> 00:08:13,000
But it often takes you pretty close.

128
00:08:13,000 --> 00:08:14,000


