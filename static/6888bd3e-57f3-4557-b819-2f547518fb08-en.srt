0
00:00:00,000 --> 00:00:00,000


1
00:00:00,000 --> 00:00:02,000
So let me give you some examples of quantum error correcting

2
00:00:02,000 --> 00:00:02,000
codes.

3
00:00:02,000 --> 00:00:04,000
So one example, because it's quantum

4
00:00:04,000 --> 00:00:06,000
it generalizes classical.

5
00:00:06,000 --> 00:00:09,000
So one example is any classical code

6
00:00:09,000 --> 00:00:11,000
is an example of a quantum error correcting code.

7
00:00:11,000 --> 00:00:18,000


8
00:00:18,000 --> 00:00:21,000
We'll very soon see why it's not a satisfactory example,

9
00:00:21,000 --> 00:00:24,000
but mathematically, it makes sense.

10
00:00:24,000 --> 00:00:27,000
In some cases, it can be a good idea.

11
00:00:27,000 --> 00:00:38,000
So let's say our classical code is some collection of 2

12
00:00:38,000 --> 00:00:41,000
to the k bit strings.

13
00:00:41,000 --> 00:00:43,000
The way we promote that to a quantum code

14
00:00:43,000 --> 00:00:51,000
is for each one of these we take the vector

15
00:00:51,000 --> 00:00:56,000
and then we take the span of all these vectors

16
00:00:56,000 --> 00:00:57,000
and we get a subspace.

17
00:00:57,000 --> 00:01:04,000


18
00:01:04,000 --> 00:01:07,000
OK, so we have a subspace of dimension 2

19
00:01:07,000 --> 00:01:10,000
to the k corresponding to this classical code.

20
00:01:10,000 --> 00:01:18,000


21
00:01:18,000 --> 00:01:21,000
And there are some properties of the classical code

22
00:01:21,000 --> 00:01:23,000
that this quantum code will inherit.

23
00:01:23,000 --> 00:01:32,000
So suppose that the classical code

24
00:01:32,000 --> 00:01:36,000
has distance d, meaning it corrects

25
00:01:36,000 --> 00:01:40,000
d-minus one over two errors.

26
00:01:40,000 --> 00:01:44,000
Well, for a classical code, there's only one kind of error

27
00:01:44,000 --> 00:01:46,000
and that's a bit flip.

28
00:01:46,000 --> 00:01:50,000
And in quantum language that means an x, a pollyx.

29
00:01:50,000 --> 00:01:56,000
So if it has distance d, then c can

30
00:01:56,000 --> 00:02:13,000
correct the set of x's on up to d minus 1 over 2 positions.

31
00:02:13,000 --> 00:02:14,000
So it's kind of like what I defined here.

32
00:02:14,000 --> 00:02:18,000
Here I said, I want to find operators

33
00:02:18,000 --> 00:02:21,000
that looked like identity in most positions

34
00:02:21,000 --> 00:02:25,000
but an arbitrary poly on up to d-minus 1 over 2 positions.

35
00:02:25,000 --> 00:02:27,000
Here I'm doing something more restricted.

36
00:02:27,000 --> 00:02:30,000
I'm saying it looks like identity in most places,

37
00:02:30,000 --> 00:02:32,000
but it's allowed just to be x in a few others.

38
00:02:32,000 --> 00:02:35,000
I'm not allowed to put any y's or z's.

39
00:02:35,000 --> 00:02:39,000
So it's a more restricted set of errors.

40
00:02:39,000 --> 00:02:41,000
It's basically just the errors that we have

41
00:02:41,000 --> 00:02:44,000
to worry about classically.

42
00:02:44,000 --> 00:02:47,000
So that's why I'm saying it's not a completely terrible code.

43
00:02:47,000 --> 00:02:50,000
It does correct some of the errors that we care about.

44
00:02:50,000 --> 00:02:52,000
However, it does not--

45
00:02:52,000 --> 00:02:54,000
these in general do not correct z errors.

46
00:02:54,000 --> 00:03:01,000


47
00:03:01,000 --> 00:03:03,000
I mean, there may be special cases

48
00:03:03,000 --> 00:03:05,000
where they happen to do OK against some z errors

49
00:03:05,000 --> 00:03:07,000
for some strange reason.

50
00:03:07,000 --> 00:03:09,000
But in general, they will not correct z errors.

51
00:03:09,000 --> 00:03:15,000


52
00:03:15,000 --> 00:03:21,000
So just as an example, if you take--

53
00:03:21,000 --> 00:03:24,000
you know, I said in classically, the repetition code

54
00:03:24,000 --> 00:03:27,000
is the best code for error correction

55
00:03:27,000 --> 00:03:28,000
if you just care about correcting errors.

56
00:03:28,000 --> 00:03:31,000
If you don't care about rate, efficiency,

57
00:03:31,000 --> 00:03:34,000
then you just want to correct errors,

58
00:03:34,000 --> 00:03:36,000
the biggest distance you can get is with the repetition code.

59
00:03:36,000 --> 00:03:40,000


60
00:03:40,000 --> 00:03:45,000
But quantumly, if you take the subspace spanned by these two

61
00:03:45,000 --> 00:03:48,000
vectors, it's going to do a great job

62
00:03:48,000 --> 00:03:50,000
of correcting x errors.

63
00:03:50,000 --> 00:03:53,000
You can see they're orthogonal and they remain orthogonal

64
00:03:53,000 --> 00:03:55,000
even after I apply a bunch of x's to them.

65
00:03:55,000 --> 00:03:59,000
So I satisfy the error correcting condition that way.

66
00:03:59,000 --> 00:04:01,000
But the relative phase between these

67
00:04:01,000 --> 00:04:04,000
will be screwed up by a z in any position.

68
00:04:04,000 --> 00:04:08,000
So in fact, it makes the rate of z errors n times larger

69
00:04:08,000 --> 00:04:10,000
than it used to be because if I have kind

70
00:04:10,000 --> 00:04:15,000
of independent z noise in every position, now

71
00:04:15,000 --> 00:04:17,000
I'm vulnerable to noise in any cubit

72
00:04:17,000 --> 00:04:20,000
instead of just being vulnerable to noise in one cubit.

73
00:04:20,000 --> 00:04:25,000
So it makes me in a sense more vulnerable to z errors, which

74
00:04:25,000 --> 00:04:28,000
is why we have a field of quantum error correcting code,

75
00:04:28,000 --> 00:04:30,000
why we can't just import all the things we

76
00:04:30,000 --> 00:04:33,000
know from classical codes.

77
00:04:33,000 --> 00:04:34,000


