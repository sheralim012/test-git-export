0
00:00:00,000 --> 00:00:00,000


1
00:00:00,000 --> 00:00:01,000
Let me get some examples.

2
00:00:01,000 --> 00:00:05,000
So I argued last time that if you have a classical code,

3
00:00:05,000 --> 00:00:07,000
it's always stabilized by some product of these.

4
00:00:07,000 --> 00:00:11,000


5
00:00:11,000 --> 00:00:20,000
So one easy example of this, suppose our subspace is just

6
00:00:20,000 --> 00:00:23,000
the span of the 00 vector.

7
00:00:23,000 --> 00:00:33,000
Then this is stabilized by--

8
00:00:33,000 --> 00:00:37,000
basically, it's not stabilized by any x or y terms.

9
00:00:37,000 --> 00:00:41,000
If I multiply by x, it's going to change one of the zeros

10
00:00:41,000 --> 00:00:42,000
to a 1.

11
00:00:42,000 --> 00:00:45,000
Same if I multiply by y, up to a phase.

12
00:00:45,000 --> 00:00:49,000
But it is stabilized by the z's.

13
00:00:49,000 --> 00:00:50,000
And in fact, any product of these.

14
00:00:50,000 --> 00:00:58,000
So the stabilizer group I can write like this.

15
00:00:58,000 --> 00:01:02,000
It's these four operators are the things that

16
00:01:02,000 --> 00:01:08,000
stabilize this subspace, this one-dimensional subspace.

17
00:01:08,000 --> 00:01:11,000
And you'll notice that there's a little bit of redundancy here.

18
00:01:11,000 --> 00:01:15,000
Because this is a subgroup, if I just list a few of these,

19
00:01:15,000 --> 00:01:19,000
then I get for free all of their products.

20
00:01:19,000 --> 00:01:26,000
And so I could write this also using this notation.

21
00:01:26,000 --> 00:01:29,000
The brackets here mean the group generated.

22
00:01:29,000 --> 00:01:39,000
So this means group generated by IZ and ZI.

23
00:01:39,000 --> 00:01:42,000


24
00:01:42,000 --> 00:01:43,000
So whatever is inside the bracket,

25
00:01:43,000 --> 00:01:47,000
just take all ways of multiplying them together--

26
00:01:47,000 --> 00:01:50,000
including taking none of them and getting the identity--

27
00:01:50,000 --> 00:01:53,000
and that means it's the group generated by these elements.

28
00:01:53,000 --> 00:01:56,000
So if I just take these two elements, which stabilize this,

29
00:01:56,000 --> 00:02:00,000
they generate these four things in S.

30
00:02:00,000 --> 00:02:03,000
And here it says small savings, but it for a larger stabilizer

31
00:02:03,000 --> 00:02:05,000
group, it can be a big savings.

32
00:02:05,000 --> 00:02:14,000


33
00:02:14,000 --> 00:02:18,000
And this is, of course, essentially a special case

34
00:02:18,000 --> 00:02:20,000
of what we saw last time with classical codes.

35
00:02:20,000 --> 00:02:22,000


36
00:02:22,000 --> 00:02:25,000
But you can also get some non-classical states

37
00:02:25,000 --> 00:02:27,000
stabilized in this way.

38
00:02:27,000 --> 00:02:37,000
So another example is the [INAUDIBLE] tangled state.

39
00:02:37,000 --> 00:02:40,000


40
00:02:40,000 --> 00:02:43,000
And what is it stabilized by?

41
00:02:43,000 --> 00:02:50,000
We know it's stabilized by ZZ because it applies at no phase

42
00:02:50,000 --> 00:02:53,000
here, and it applies minus 1 twice to this state.

43
00:02:53,000 --> 00:02:54,000
So it acts trivially here.

44
00:02:54,000 --> 00:02:57,000


45
00:02:57,000 --> 00:02:58,000
And it's also stabilized by XX.

46
00:02:58,000 --> 00:03:02,000
Because XX will switch 00 and 11.

47
00:03:02,000 --> 00:03:07,000
And so it will leave this state unchanged.

48
00:03:07,000 --> 00:03:11,000
And of course, we should make sure that these commute.

49
00:03:11,000 --> 00:03:13,000
X and Z anti-commute.

50
00:03:13,000 --> 00:03:19,000
But XX and ZZ commute because their commutator picks up

51
00:03:19,000 --> 00:03:21,000
two copies of minus 1, which gives you 1.

52
00:03:21,000 --> 00:03:25,000
And of course, let me just mention, when I say ZZ,

53
00:03:25,000 --> 00:03:28,000
it's shorthand for Z tensor Z. And so

54
00:03:28,000 --> 00:03:31,000
on for all of these others.

55
00:03:31,000 --> 00:03:34,000
Do you also negation of all of the properties

56
00:03:34,000 --> 00:03:36,000
in the [INAUDIBLE]?

57
00:03:36,000 --> 00:03:37,000
Like for instance, you could also

58
00:03:37,000 --> 00:03:39,000
have this be like the minus IZ.

59
00:03:39,000 --> 00:03:40,000
Good question.

60
00:03:40,000 --> 00:03:43,000
So instead of answering your question

61
00:03:43,000 --> 00:03:47,000
about what about the negation, suppose I have the state--

62
00:03:47,000 --> 00:03:54,000


63
00:03:54,000 --> 00:04:01,000
let's say 011.

64
00:04:01,000 --> 00:04:04,000
What is going to stabilize this?

65
00:04:04,000 --> 00:04:08,000
Well, it's a plus 1 eigenstate of Z1

66
00:04:08,000 --> 00:04:12,000
and a minus 1 eigenstate of Z2 and Z3.

67
00:04:12,000 --> 00:04:15,000
And so to be a stabilizer, I need to be a plus 1 eigenstate.

68
00:04:15,000 --> 00:04:18,000
So one of the stabilizers is ZII.

69
00:04:18,000 --> 00:04:20,000


70
00:04:20,000 --> 00:04:26,000
But for the second qubit, the stabilizer I want is minus IZI.

71
00:04:26,000 --> 00:04:30,000
And the third qubit, it's minus--

72
00:04:30,000 --> 00:04:31,000
oops.

73
00:04:31,000 --> 00:04:34,000


74
00:04:34,000 --> 00:04:36,000
Minus IIZ.

75
00:04:36,000 --> 00:04:42,000
So when I put a minus sign here, remember the way these enter in

76
00:04:42,000 --> 00:04:47,000
is that v sub s should be a plus 1 eigenstate of this operator.

77
00:04:47,000 --> 00:04:49,000
So if I put in a minus sign, that's

78
00:04:49,000 --> 00:04:50,000
like saying that it should be a minus I

79
00:04:50,000 --> 00:04:54,000
eigenstate of the operator before I put in the minus sign.

80
00:04:54,000 --> 00:04:58,000
So it definitely changes things to put in the minus sign.

81
00:04:58,000 --> 00:05:01,000
And of course, if I put in both a poly and its negated version

82
00:05:01,000 --> 00:05:06,000
together, then [INAUDIBLE] these issues about y's,

83
00:05:06,000 --> 00:05:11,000
I would get minus identity, and so then nothing

84
00:05:11,000 --> 00:05:14,000
would be allowed, which is kind of like saying

85
00:05:14,000 --> 00:05:15,000
that a qubit can't be both 0 and 1.

86
00:05:15,000 --> 00:05:20,000


87
00:05:20,000 --> 00:05:20,000
Good.

88
00:05:20,000 --> 00:05:25,000
Any other questions so far?

89
00:05:25,000 --> 00:05:27,000
So these are all one-dimensional subspaces.

90
00:05:27,000 --> 00:05:31,000


91
00:05:31,000 --> 00:05:45,000
Of course, we also saw, for the repetition code,

92
00:05:45,000 --> 00:05:48,000
it had these stabilizers.

93
00:05:48,000 --> 00:05:52,000
So for the repetition code, you want to add the constraint that

94
00:05:52,000 --> 00:05:56,000
the first two qubits are equal in the 01 basis and the second

95
00:05:56,000 --> 00:05:58,000
two qubits are equal.

96
00:05:58,000 --> 00:06:01,000
So how do you impose that two qubits are equal?

97
00:06:01,000 --> 00:06:04,000
You say that they're stabilized by a product of z's on both

98
00:06:04,000 --> 00:06:06,000
of those qubits.

99
00:06:06,000 --> 00:06:10,000
Because those will-- that's basically

100
00:06:10,000 --> 00:06:13,000
checking the XOR of those two bits

101
00:06:13,000 --> 00:06:15,000
and verifying that the XOR is equal to 0.

102
00:06:15,000 --> 00:06:16,000
So I checked that.

103
00:06:16,000 --> 00:06:18,000
The first two qubits are the same,

104
00:06:18,000 --> 00:06:20,000
and the second and third qubit are the same.

105
00:06:20,000 --> 00:06:25,000


106
00:06:25,000 --> 00:06:35,000
What if I want this code, the span of plus, plus, plus,

107
00:06:35,000 --> 00:06:36,000
and minus, minus, minus?

108
00:06:36,000 --> 00:06:40,000


109
00:06:40,000 --> 00:06:43,000
What would the stabilizer group be for these?

110
00:06:43,000 --> 00:06:47,000


111
00:06:47,000 --> 00:06:48,000
Right.

112
00:06:48,000 --> 00:06:50,000
It's XXI.

113
00:06:50,000 --> 00:06:52,000
And then what's the other one?

114
00:06:52,000 --> 00:06:53,000
IXX.

115
00:06:53,000 --> 00:06:56,000


116
00:06:56,000 --> 00:07:00,000
So we're doing the same thing, except instead of the 01 basis,

117
00:07:00,000 --> 00:07:01,000
we have the plus minus basis.

118
00:07:01,000 --> 00:07:06,000
And on that basis, the x operator just looks the same--

119
00:07:06,000 --> 00:07:09,000
acts the same way the z operator does.

120
00:07:09,000 --> 00:07:11,000
Plus is a plus 1 eigenstate.

121
00:07:11,000 --> 00:07:13,000
Minus is a minus 1 eigenstate.

122
00:07:13,000 --> 00:07:17,000


123
00:07:17,000 --> 00:07:24,000
And you'll notice one thing about this,

124
00:07:24,000 --> 00:07:27,000
which is for the first examples where

125
00:07:27,000 --> 00:07:30,000
I had a one-dimensional subspace,

126
00:07:30,000 --> 00:07:34,000
I had as many stabilizer generators as I had qubits.

127
00:07:34,000 --> 00:07:38,000
And basically, that's because every stabilizer generator

128
00:07:38,000 --> 00:07:39,000
is like a constraint.

129
00:07:39,000 --> 00:07:43,000
If you take a poly, then half of its eigenvalues are plus 1.

130
00:07:43,000 --> 00:07:47,000
Half of its eigenvalues are minus 1.

131
00:07:47,000 --> 00:07:53,000
And if I constrain myself to be in the plus 1 eigenspace,

132
00:07:53,000 --> 00:07:56,000
then that's sort of cutting me down to half of the space.

133
00:07:56,000 --> 00:07:58,000
So in general, I start with 2 to the n dimensions.

134
00:07:58,000 --> 00:08:03,000
And every time I impose a stabilizer constraint,

135
00:08:03,000 --> 00:08:05,000
I'm cutting my dimensions in half.

136
00:08:05,000 --> 00:08:08,000
So if I have as many stabilizers as qubits,

137
00:08:08,000 --> 00:08:10,000
I've cut myself down to one dimension.

138
00:08:10,000 --> 00:08:13,000
Here, I start with eight dimensions.

139
00:08:13,000 --> 00:08:15,000
And I only put in two stabilizers.

140
00:08:15,000 --> 00:08:17,000
So I've divided by 4.

141
00:08:17,000 --> 00:08:19,000
I'm still left with two dimensions.

142
00:08:19,000 --> 00:08:24,000
And we'll see in a minute that's a more general phenomenon.

143
00:08:24,000 --> 00:08:26,000
With a big asterisk, which is, these

144
00:08:26,000 --> 00:08:29,000
have to be non-redundant stabilizers.

145
00:08:29,000 --> 00:08:31,000
So these are non-redundant.

146
00:08:31,000 --> 00:08:34,000
I can't multiply them together to get the identity.

147
00:08:34,000 --> 00:08:39,000
But if I were to add a third stabilizer, like ZIZ,

148
00:08:39,000 --> 00:08:40,000
that would be redundant.

149
00:08:40,000 --> 00:08:42,000
That wouldn't carry any more information.

150
00:08:42,000 --> 00:08:44,000
It wouldn't further change the subspace

151
00:08:44,000 --> 00:08:45,000
or cut down its dimension.

152
00:08:45,000 --> 00:08:50,000


153
00:08:50,000 --> 00:08:52,000
And I should say this is kind of a non-trivial fact,

154
00:08:52,000 --> 00:08:54,000
that each one will cut down the dimensions by half.

155
00:08:54,000 --> 00:08:56,000
You shouldn't necessarily believe me right away.

156
00:08:56,000 --> 00:08:57,000
I'll prove it in a minute.

157
00:08:57,000 --> 00:08:59,000
But it's not at all obvious.

158
00:08:59,000 --> 00:09:01,000
Just because each poly by itself has

159
00:09:01,000 --> 00:09:05,000
1/2 plus 1 eigenvalues and 1/2 minus 1 eigenvalues,

160
00:09:05,000 --> 00:09:07,000
it doesn't follow that when you combine

161
00:09:07,000 --> 00:09:10,000
two of them, the fraction--

162
00:09:10,000 --> 00:09:13,000
they keep on being sort of unbiased relative

163
00:09:13,000 --> 00:09:16,000
to each other.

164
00:09:16,000 --> 00:09:18,000
It's like saying if I flip many coins,

165
00:09:18,000 --> 00:09:21,000
each one is heads half the time and tails half the time,

166
00:09:21,000 --> 00:09:23,000
regardless of the previous coin flips.

167
00:09:23,000 --> 00:09:24,000
That's true of coins, but it doesn't

168
00:09:24,000 --> 00:09:27,000
have to be true of operators.

169
00:09:27,000 --> 00:09:30,000
It could have been that if the first three polys I checked,

170
00:09:30,000 --> 00:09:32,000
I'm in the plus 1 eigenstate of those,

171
00:09:32,000 --> 00:09:35,000
the next one is more likely to be in the plus 1 eigenspace.

172
00:09:35,000 --> 00:09:37,000
That turns out not to be true, but a priori

173
00:09:37,000 --> 00:09:38,000
it's possible when I'm just dealing

174
00:09:38,000 --> 00:09:41,000
with arbitrary matrices.

175
00:09:41,000 --> 00:09:44,000
So there's, again, something special about polys

176
00:09:44,000 --> 00:09:47,000
that they have this property.

177
00:09:47,000 --> 00:09:49,000
I'll give one more example, which I won't

178
00:09:49,000 --> 00:09:51,000
give a full derivation of.

179
00:09:51,000 --> 00:10:06,000
So suppose that VS is the code space of the shor

180
00:10:06,000 --> 00:10:07,000
nine qubit code.

181
00:10:07,000 --> 00:10:12,000
So this belongs in the space subset

182
00:10:12,000 --> 00:10:15,000
of a two-dimensional subset of the space of nine qubits.

183
00:10:15,000 --> 00:10:17,000


184
00:10:17,000 --> 00:10:22,000
So I'll write down--

185
00:10:22,000 --> 00:10:24,000
so if you remember this one, this

186
00:10:24,000 --> 00:10:29,000
was the concatenation of these two codes.

187
00:10:29,000 --> 00:10:33,000
So we would take plus plus plus and minus minus minus,

188
00:10:33,000 --> 00:10:36,000
and then encode each of these in turn

189
00:10:36,000 --> 00:10:38,000
into this three-bit repetition code.

190
00:10:38,000 --> 00:10:41,000
So at the lowest level, you have a regular three-bit repetition

191
00:10:41,000 --> 00:10:43,000
code, and you have three of them.

192
00:10:43,000 --> 00:10:45,000
So you want to enforce all of those constraints.

193
00:10:45,000 --> 00:10:48,000


194
00:10:48,000 --> 00:10:49,000
So for example--

195
00:10:49,000 --> 00:10:52,000


196
00:10:52,000 --> 00:10:55,000
I'm going to use different notation instead of the ZZ III,

197
00:10:55,000 --> 00:10:57,000
since I don't want to write a ton of I's.

198
00:10:57,000 --> 00:11:01,000
I'll just say Z1 Z2 means product of the first two polys,

199
00:11:01,000 --> 00:11:03,000
identity on the rest.

200
00:11:03,000 --> 00:11:04,000
Z2 Z3, et cetera.

201
00:11:04,000 --> 00:11:08,000
So that forces the first three qubits

202
00:11:08,000 --> 00:11:09,000
to be in this code space.

203
00:11:09,000 --> 00:11:12,000
Then I'll do the same thing for qubits four, five, six,

204
00:11:12,000 --> 00:11:13,000
and seven, eight, nine.

205
00:11:13,000 --> 00:11:20,000
So for four, five, six, I do Z4 Z5, Z5 Z6,

206
00:11:20,000 --> 00:11:28,000
and then Z7 Z8, Z8 Z9.

207
00:11:28,000 --> 00:11:31,000
OK, so that forces each three-qubit block

208
00:11:31,000 --> 00:11:36,000
to be in a little repetition code like this.

209
00:11:36,000 --> 00:11:42,000
Then the next step is something which a full justification of I

210
00:11:42,000 --> 00:11:44,000
will have to give you later, but we

211
00:11:44,000 --> 00:11:48,000
have to somehow ensure that the outer code block looks

212
00:11:48,000 --> 00:11:50,000
like an encoded version of this plus plus

213
00:11:50,000 --> 00:11:54,000
plus minus minus minus code.

214
00:11:54,000 --> 00:11:57,000
And so to do that, we want to take these stabilizers

215
00:11:57,000 --> 00:12:00,000
and encode them according to this inner code.

216
00:12:00,000 --> 00:12:04,000
And the way that looks is, they turn into--

217
00:12:04,000 --> 00:12:06,000
they were sort of two X operators.

218
00:12:06,000 --> 00:12:07,000
They turn into six X operators.

219
00:12:07,000 --> 00:12:16,000
So it looks like X1 X2 X3 X4 X5 X6 is one of them,

220
00:12:16,000 --> 00:12:19,000
and then the other one is basically four through nine.

221
00:12:19,000 --> 00:12:25,000


222
00:12:25,000 --> 00:12:27,000
So altogether, we have eight operators,

223
00:12:27,000 --> 00:12:30,000
six products of Z's and two products of X's.

224
00:12:30,000 --> 00:12:32,000
We have nine qubits all together.

225
00:12:32,000 --> 00:12:33,000
So these eight operators cut us down

226
00:12:33,000 --> 00:12:36,000
to a two-dimensional space.

227
00:12:36,000 --> 00:12:39,000
And this is sort of offered slightly without proof,

228
00:12:39,000 --> 00:12:41,000
and we'll give more justification for it later.

229
00:12:41,000 --> 00:12:44,000


230
00:12:44,000 --> 00:12:47,000
So these are some examples of what's possible.

231
00:12:47,000 --> 00:12:50,000


232
00:12:50,000 --> 00:12:51,000
Any questions about the examples,

233
00:12:51,000 --> 00:12:54,000
or about the stabilizer codes more generally?

234
00:12:54,000 --> 00:12:57,000


235
00:12:57,000 --> 00:12:59,000
One thing I want to mention about them

236
00:12:59,000 --> 00:13:01,000
is that they're a good way of defining codes,

237
00:13:01,000 --> 00:13:05,000
but code is just a subspace with maybe some nice properties.

238
00:13:05,000 --> 00:13:07,000
And you can really just use them to describe

239
00:13:07,000 --> 00:13:09,000
a state or a subspace more generally.

240
00:13:09,000 --> 00:13:11,000
You could consider that to be a code.

241
00:13:11,000 --> 00:13:13,000
Sometimes these make good codes.

242
00:13:13,000 --> 00:13:14,000
But in some cases, it's useful just

243
00:13:14,000 --> 00:13:19,000
to describe a state without getting into

244
00:13:19,000 --> 00:13:22,000
whether or not it corresponds to an error correcting code.

245
00:13:22,000 --> 00:13:22,000


