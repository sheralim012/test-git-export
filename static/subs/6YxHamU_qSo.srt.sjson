{
    "start": [
        0, 
        0, 
        3000, 
        5000, 
        7000, 
        11000, 
        13000, 
        21000, 
        24000, 
        26000, 
        31000, 
        34000, 
        40000, 
        42000, 
        47000, 
        49000, 
        50000, 
        54000, 
        59000, 
        66000, 
        68000, 
        72000, 
        74000, 
        91000, 
        94000, 
        96000, 
        99000, 
        104000, 
        106000, 
        109000, 
        112000, 
        116000, 
        119000, 
        120000, 
        126000, 
        128000, 
        130000, 
        134000, 
        137000, 
        141000, 
        147000, 
        149000, 
        151000, 
        156000, 
        160000, 
        161000, 
        163000, 
        167000, 
        169000, 
        172000, 
        174000, 
        177000, 
        179000, 
        183000, 
        184000, 
        186000, 
        190000, 
        192000, 
        194000, 
        196000, 
        199000, 
        201000, 
        204000, 
        206000, 
        208000, 
        210000, 
        211000, 
        214000, 
        217000, 
        219000, 
        223000, 
        225000, 
        227000, 
        229000, 
        232000, 
        235000, 
        240000, 
        241000, 
        246000, 
        249000, 
        253000, 
        257000, 
        259000, 
        261000, 
        264000, 
        267000, 
        271000, 
        273000, 
        275000, 
        279000, 
        286000, 
        295000, 
        298000, 
        300000, 
        303000, 
        306000, 
        309000, 
        312000, 
        315000, 
        317000, 
        320000, 
        323000, 
        337000, 
        337000, 
        342000, 
        344000, 
        348000, 
        350000, 
        354000, 
        358000, 
        361000, 
        363000, 
        365000, 
        368000, 
        375000, 
        380000, 
        381000, 
        385000, 
        389000, 
        398000, 
        400000, 
        411000, 
        414000, 
        419000, 
        421000, 
        422000, 
        425000, 
        427000, 
        439000, 
        440000, 
        444000, 
        447000, 
        449000, 
        452000, 
        457000, 
        461000, 
        463000, 
        466000, 
        470000, 
        473000, 
        476000, 
        478000, 
        480000, 
        483000, 
        498000, 
        500000, 
        502000, 
        505000, 
        508000, 
        509000, 
        512000, 
        513000, 
        515000, 
        518000, 
        520000, 
        522000, 
        525000, 
        526000, 
        528000, 
        530000, 
        535000, 
        537000, 
        541000, 
        552000, 
        554000, 
        557000, 
        559000, 
        561000, 
        563000, 
        566000, 
        569000, 
        572000, 
        574000, 
        577000, 
        582000, 
        584000
    ], 
    "end": [
        0, 
        3000, 
        5000, 
        7000, 
        11000, 
        13000, 
        21000, 
        24000, 
        26000, 
        31000, 
        34000, 
        40000, 
        42000, 
        47000, 
        49000, 
        50000, 
        54000, 
        59000, 
        66000, 
        68000, 
        72000, 
        74000, 
        91000, 
        94000, 
        96000, 
        99000, 
        104000, 
        106000, 
        109000, 
        112000, 
        116000, 
        119000, 
        120000, 
        126000, 
        128000, 
        130000, 
        134000, 
        137000, 
        141000, 
        147000, 
        149000, 
        151000, 
        156000, 
        160000, 
        161000, 
        163000, 
        167000, 
        169000, 
        172000, 
        174000, 
        177000, 
        179000, 
        183000, 
        184000, 
        186000, 
        190000, 
        192000, 
        194000, 
        196000, 
        199000, 
        201000, 
        204000, 
        206000, 
        208000, 
        210000, 
        211000, 
        214000, 
        217000, 
        219000, 
        223000, 
        225000, 
        227000, 
        229000, 
        232000, 
        235000, 
        240000, 
        241000, 
        246000, 
        249000, 
        253000, 
        257000, 
        259000, 
        261000, 
        264000, 
        267000, 
        271000, 
        273000, 
        275000, 
        279000, 
        286000, 
        295000, 
        298000, 
        300000, 
        303000, 
        306000, 
        309000, 
        312000, 
        315000, 
        317000, 
        320000, 
        323000, 
        337000, 
        337000, 
        342000, 
        344000, 
        348000, 
        350000, 
        354000, 
        358000, 
        361000, 
        363000, 
        365000, 
        368000, 
        375000, 
        380000, 
        381000, 
        385000, 
        389000, 
        398000, 
        400000, 
        411000, 
        414000, 
        419000, 
        421000, 
        422000, 
        425000, 
        427000, 
        439000, 
        440000, 
        444000, 
        447000, 
        449000, 
        452000, 
        457000, 
        461000, 
        463000, 
        466000, 
        470000, 
        473000, 
        476000, 
        478000, 
        480000, 
        483000, 
        498000, 
        500000, 
        502000, 
        505000, 
        508000, 
        509000, 
        512000, 
        513000, 
        515000, 
        518000, 
        520000, 
        522000, 
        525000, 
        526000, 
        528000, 
        530000, 
        535000, 
        537000, 
        541000, 
        552000, 
        554000, 
        557000, 
        559000, 
        561000, 
        563000, 
        566000, 
        569000, 
        572000, 
        574000, 
        577000, 
        582000, 
        584000, 
        585000
    ], 
    "text": [
        "", 
        "Let's talk about how a classical reversible circuit even", 
        "computes this xy over n.", 
        "Because in a sense, we already had to deal with that problem.", 
        "If you look at a multiplication circuit--", 
        "you know, how does a classical circuit--", 
        "", 
        "so how would I do that on a quantum computer?", 
        "Well, I know how to multiply and divide, right?", 
        "I can write that out in a series of ANDs and ORs and NOTs.", 
        "But my quantum computer needs to use reversible logic.", 
        "I have to use Toffolis and CCNOTs and NOT gates.", 
        "So how can I do that?", 
        "Well to do an AND, I can compute an AND into a fresh bit", 
        "by using a Toffoli gate.", 
        "Right?", 
        "So use classical circuit.", 
        "", 
        "Replace things like AND with controlled control", 
        "NOT or Toffoli.", 
        "", 
        "Right, and so that would do, for example,", 
        "a, b, 0 would go to a, b, ab, if a and b are bits.", 
        "OK, so I can do AND gate.", 
        "I can obviously do a NOT gate.", 
        "I can build anything from those.", 
        "So I can do my circuit, but I'm using ancillas to do so.", 
        "Every time I use an AND--", 
        "every time I want to do an AND, I have to bring in a new bit.", 
        "And that's a consequence of reversibility.", 
        "And the AND of two bits does not contain sufficient information", 
        "to recover even one of those bits,", 
        "if I delete the other one.", 
        "So I can't just overwrite my existing bits with these ANDs", 
        "that I'm computing, or I'll lose information.", 
        "So if I want to compute AND, I need", 
        "to keep on adding fresh ancilla.", 
        "So what it means is if I just write down that quantum", 
        "circuit, I will compute xy over n.", 
        "But I'll also have some garbage register, that in general,", 
        "a function of x and y.", 
        "", 
        "Because as I do these ANDs, I produce the final output--", 
        "but I keep a record of all of the intermediate ANDs", 
        "that I did along the way.", 
        "Those qubits do not go away, so they", 
        "go into what I call the garbage register.", 
        "And I'm write garbage of xy, because in general,", 
        "this garbage register is a function of the inputs.", 
        "Different inputs will lead to different outputs", 
        "of these intermediate ANDs, so different things in the garbage", 
        "register.", 
        "And now, the whole reason I'm doing this on a quantum", 
        "computer is that I potentially want", 
        "to run this in superposition.", 
        "So I'm writing this transformation on basis states,", 
        "but it's a unitary transformation,", 
        "or an isometry-- anyway, it's linear.", 
        "Which means, if I put in a linear combination of these,", 
        "I get a linear combination of this.", 
        "So that's what makes quantum computing interesting,", 
        "is being able to run it on linear combinations.", 
        "But if I discard the garbage register,", 
        "and that contains information about x and y,", 
        "that's going to break the superposition.", 
        "It's going to collapse it.", 
        "It's going to be like measuring x and y.", 
        "Maybe not fully, but enough to cause problems.", 
        "So this is unacceptable.", 
        "If I compute xy in this way, that's not going to work.", 
        "Or rather, it might be a starting point,", 
        "but I can't just stop here.", 
        "So I have to get rid of this garbage.", 
        "It's kind of like up here, after I've computed the phase,", 
        "I have to get rid of this.", 
        "In fact, I can even, at this point, apply the phase--", 
        "you know, with the garbage attached.", 
        "And now I want to get rid of both the garbage and this xy", 
        "over n register.", 
        "So anyone know how I do this?", 
        "How do I get rid of the garbage, and the xy over n?", 
        "So let's remember how we computed it--", 
        "we computed it by taking a classical circuit", 
        "and making it reversible.", 
        "Right?", 
        "And the reversible gates have the property", 
        "that if I do that dagger of one gate, of course,", 
        "I undo that gate.", 
        "So if I have a sequence of gates that computes these,", 
        "I can just run that sequence backwards and un-compute these.", 
        "So by running it backwards, I'm just left with--", 
        "let me suppose I started with some [? state, ?]", 
        "So I'll say I started with a zero.", 
        "So now I keep around an extra zero register.", 
        "", 
        "So by just running those gates backwards,", 
        "I un-compute these two registers.", 
        "But the phase still sticks around.", 
        "Let me give a very simple example.", 
        "Let me get to it for a single and.", 
        "So I do a Toffoli gate, and I get this.", 
        "Now let's suppose I map this to a, let's say, e to the i phi", 
        "a b--", 
        "", 
        "how would I I do this?", 
        "I would act on this third qubit, with an appropriate single", 
        "qubit gate, a phase gate.", 
        "And then would pick up either the i phi times either 0 or--", 
        "it would either be no phase, or e to the i phi,", 
        "depending on whether a b is 0 or 1.", 
        "Then I do a Toffoli gate, again.", 
        "When I'm trying to a Toffoli gate again,", 
        "another controlled control naught will send me to the e", 
        "to the i phi a b a b 0.", 
        "", 
        "So same thing up here.", 
        "", 
        "The reversible classical logic un-computes", 
        "these two registers, but no phases change in the process.", 
        "One more thing-- suppose I wonted--", 
        "", 
        "suppose I wanted this as my output.", 
        "So, here I showed you how you could just get the phase.", 
        "Suppose I wanted this.", 
        "And I have a circuit.", 
        "", 
        "So let me just write it out--", 
        "C acting on xy 0 gives me xy xy over n,", 
        "and the garbage register.", 
        "", 
        "How can I use C to give me this thing?", 
        "One thing I can do is I can run C--", 
        "and I've made it to this point.", 
        "And then, one thing I can do reversibly", 
        "is copy this register.", 
        "The way I do that is I add a bunch of zeros,", 
        "and I just do a bitwise controlled NOTs", 
        "So if I have a bit, a, and another register of zero,", 
        "I do a control naught, I get a a.", 
        "If I have a bunch of bits, I can just copy all those bits.", 
        "It's not cloning--", 
        "I'm not copying superpositions, I'm", 
        "just copying in the computational basis.", 
        "So I can map this to xy x y over n, garbage xy xy over n.", 
        "It's important to note that this copying produces", 
        "no further garbage.", 
        "We had to make some garbage to make xy over n,", 
        "but once we have it, we can make a second copy", 
        "without any garbage.", 
        "Because we're just doing this bitwise controlled NOTs.", 
        "And the one thing.", 
        "I'm being sloppy about here, is I'm assuming you", 
        "just add registers in the zero state for free.", 
        "And once we're done with them, they're", 
        "decoupled from the rest of our computation.", 
        "So we don't have to worry about them anymore.", 
        "Now, what do we do?", 
        "What's the next step here?", 
        "Anyone have a guess?", 
        "Exactly, so we apply C dagger to this state, to the first--", 
        "so C took these three registers to these four.", 
        "So I apply C dagger to these four registers,", 
        "and I get x y 0 x y over n.", 
        "So I have what I want, there's some extra zeros there.", 
        "But those zeros are in a known place,", 
        "they're decoupled from my computation,", 
        "so I can just move them out of the way,", 
        "and I'm left with what I want--", 
        "x y and then the desired function of them.", 
        "And I've been talking about this concrete function, of course,", 
        "you would apply to any poly-time computable function.", 
        "OK, that was a long digression, but it's", 
        "a useful general quantum algorithm", 
        "thing to know, I think, that you can compute classical things", 
        "and un-compute the garbage.", 
        ""
    ]
}