{
    "start": [
        0, 
        0, 
        2000, 
        5000, 
        7000, 
        10000, 
        13000, 
        21000, 
        23000, 
        27000, 
        31000, 
        45000, 
        55000, 
        60000, 
        71000, 
        74000, 
        75000, 
        76000, 
        79000, 
        80000, 
        82000, 
        89000, 
        99000, 
        101000, 
        105000, 
        106000, 
        108000, 
        110000, 
        112000, 
        116000, 
        118000, 
        119000, 
        122000, 
        125000, 
        127000, 
        130000, 
        133000, 
        135000, 
        138000, 
        140000, 
        141000, 
        144000, 
        146000, 
        150000, 
        151000, 
        155000, 
        156000, 
        160000, 
        163000, 
        168000, 
        174000, 
        176000, 
        179000, 
        184000, 
        188000, 
        193000, 
        195000, 
        196000, 
        200000, 
        214000, 
        228000, 
        237000, 
        241000, 
        244000, 
        248000, 
        250000, 
        253000, 
        256000, 
        258000, 
        270000, 
        272000, 
        274000, 
        277000, 
        279000, 
        282000, 
        283000, 
        287000, 
        291000, 
        294000, 
        296000
    ], 
    "end": [
        0, 
        2000, 
        5000, 
        7000, 
        10000, 
        13000, 
        21000, 
        23000, 
        27000, 
        31000, 
        45000, 
        55000, 
        60000, 
        71000, 
        74000, 
        75000, 
        76000, 
        79000, 
        80000, 
        82000, 
        89000, 
        99000, 
        101000, 
        105000, 
        106000, 
        108000, 
        110000, 
        112000, 
        116000, 
        118000, 
        119000, 
        122000, 
        125000, 
        127000, 
        130000, 
        133000, 
        135000, 
        138000, 
        140000, 
        141000, 
        144000, 
        146000, 
        150000, 
        151000, 
        155000, 
        156000, 
        160000, 
        163000, 
        168000, 
        174000, 
        176000, 
        179000, 
        184000, 
        188000, 
        193000, 
        195000, 
        196000, 
        200000, 
        214000, 
        228000, 
        237000, 
        241000, 
        244000, 
        248000, 
        250000, 
        253000, 
        256000, 
        258000, 
        270000, 
        272000, 
        274000, 
        277000, 
        279000, 
        282000, 
        283000, 
        287000, 
        291000, 
        294000, 
        296000, 
        296000
    ], 
    "text": [
        "", 
        "If we have such a thing, we can just", 
        "reduce the entire study of NP into a single language", 
        "with these properties.", 
        "And it turns out, I wouldn't mention", 
        "this if we didn't have many, many languages,", 
        "one example is called circuit-SAT.", 
        "And if you kind of stare at it enough,", 
        "you can probably convince yourself that it's NP complete.", 
        "The problem is the following.", 
        "Given-- so the input is a Boolean circuit C.", 
        "We could say with n input bits and n squared gates.", 
        "", 
        "And we say that C belongs to the language, right?", 
        "Because remember, languages are these yes/no questions", 
        "that we phrase them as SATs.", 
        "So we say the answer is yes.", 
        "If you belong to the language, if you belong to the set,", 
        "and 0 if not.", 
        "C belongs to the language if and only", 
        "if there exists an input x such that C of x is equal to 1.", 
        "I guess I should say end gates one bit output.", 
        "OK, so you have a circuit, takes an end bits,", 
        "does a bunch of gates, and outputs one bit of--", 
        "one bit of output.", 
        "And we say that the language consists", 
        "of the things for which there is an input where", 
        "the output is equal to one.", 
        "So to see this is in NP, the witness", 
        "is simply such an x, right?", 
        "If C is in the language, that means", 
        "there exists an x that will produce an output of one.", 
        "So the witness string is that x.", 
        "And then I just test the circuit on that x,", 
        "I get the output one, and I verify yes indeed,", 
        "I'm in the language.", 
        "On the other hand, if I'm not in the language,", 
        "there is no such x that will convince me, right?", 
        "If someone tries to supply a proof,", 
        "I run it through the circuit.", 
        "Doesn't take me long, and I see no, that output is zero.", 
        "That's not a good witness.", 
        "So that shows that it's in NP.", 
        "Why then NP complete?", 
        "Well basically, this is like running a universal algorithm,", 
        "right?", 
        "So for any language in NP, what does it mean to be in NP?", 
        "It means that there is a poly time verifier.", 
        "So that verifier, what do I want to know about it?", 
        "I want to know is there any witness for that verifier that", 
        "will convince me that the answer is yes.", 
        "And so I can just phrase that as here is this circuit that", 
        "implements the verifier using the fixed input string I got.", 
        "And then take that circuit with the baked in input string,", 
        "consider its input to be the witness, the purported witness.", 
        "And then have that circuit check whether the witness is valid", 
        "or not.", 
        "And output one if the witness is valid, and zero if not.", 
        "And so it's NP hard, because for any language in NP", 
        "can express the verifier on fixed input as a circuit.", 
        "", 
        "So that means that circuit-SAT captures the power of NP.", 
        "If I want to talk about P versus NP, I could just--", 
        "", 
        "it would be enough just to talk about circuit-SAT.", 
        "", 
        "I guess I should say this is back", 
        "to sort of general principles of NP hardness.", 
        "If L is NP hard, and L is NP, then P is equal to NP.", 
        "", 
        "So that's true of circuit-SAT, it's", 
        "true of anything that's NP hard.", 
        "So if I have something L which is NP hard,", 
        "and I have a polynomial time algorithm for L,", 
        "by the arguments I've given so far", 
        "that gives a poly time algorithm for anything in NP.", 
        "And so what that would mean is that P is equal to NP.", 
        "So that's why I'm saying I can capture the whole power of NP", 
        "in terms of a single language.", 
        ""
    ]
}