{
    "start": [
        0, 
        2000, 
        3000, 
        5000, 
        10000, 
        18000, 
        21000, 
        23000, 
        25000, 
        27000, 
        29000, 
        30000, 
        31000, 
        39000, 
        42000, 
        45000, 
        52000, 
        54000, 
        56000, 
        57000, 
        59000, 
        62000, 
        64000, 
        65000, 
        68000, 
        72000, 
        75000, 
        78000, 
        81000, 
        83000, 
        85000, 
        87000, 
        89000, 
        91000, 
        97000, 
        100000, 
        101000, 
        104000, 
        108000, 
        111000, 
        114000, 
        117000, 
        123000, 
        134000, 
        139000, 
        142000, 
        149000, 
        157000, 
        160000, 
        163000, 
        167000, 
        170000, 
        172000, 
        173000, 
        176000, 
        177000, 
        179000, 
        182000, 
        184000, 
        187000, 
        191000, 
        193000, 
        196000, 
        199000, 
        199000, 
        202000, 
        205000, 
        207000, 
        211000, 
        213000, 
        216000, 
        221000, 
        225000, 
        227000, 
        231000, 
        235000, 
        247000, 
        254000, 
        255000, 
        263000, 
        266000, 
        267000, 
        272000, 
        275000, 
        279000, 
        281000, 
        285000, 
        289000, 
        302000, 
        310000, 
        313000, 
        319000, 
        322000, 
        324000
    ], 
    "end": [
        2000, 
        3000, 
        5000, 
        10000, 
        18000, 
        21000, 
        23000, 
        25000, 
        27000, 
        29000, 
        30000, 
        31000, 
        39000, 
        42000, 
        45000, 
        52000, 
        54000, 
        56000, 
        57000, 
        59000, 
        62000, 
        64000, 
        65000, 
        68000, 
        72000, 
        75000, 
        78000, 
        81000, 
        83000, 
        85000, 
        87000, 
        89000, 
        91000, 
        97000, 
        100000, 
        101000, 
        104000, 
        108000, 
        111000, 
        114000, 
        117000, 
        123000, 
        134000, 
        139000, 
        142000, 
        149000, 
        157000, 
        160000, 
        163000, 
        167000, 
        170000, 
        172000, 
        173000, 
        176000, 
        177000, 
        179000, 
        182000, 
        184000, 
        187000, 
        191000, 
        193000, 
        196000, 
        199000, 
        199000, 
        202000, 
        205000, 
        207000, 
        211000, 
        213000, 
        216000, 
        221000, 
        225000, 
        227000, 
        231000, 
        235000, 
        247000, 
        254000, 
        255000, 
        263000, 
        266000, 
        267000, 
        272000, 
        275000, 
        279000, 
        281000, 
        285000, 
        289000, 
        302000, 
        310000, 
        313000, 
        319000, 
        322000, 
        324000, 
        325000
    ], 
    "text": [
        "", 
        "Let me add a non here.", 
        "Let's start with a non-Abelian HSP.", 
        "So you're given a function f such that f of x equals f of y", 
        "if and only if x y inverse belongs to h.", 
        "Now the group operation is multiplication,", 
        "and it does not commute.", 
        "Multiplication is supposed to remind you", 
        "of matrix multiplication.", 
        "If you see addition, think oh yeah,", 
        "addition, the matrices commute.", 
        "Multiplication does not.", 
        "", 
        "You see this problem and you think,", 
        "why do I have any right to solve this on a quantum computer?", 
        "Yeah, I got lucky with Shor's algorithm, which", 
        "I guess I'm not going to get into this,", 
        "but you could view that as a hidden subgroup problem", 
        "as well.", 
        "I got lucky with the discrete log,", 
        "with the general Abelian hidden subgroup problem.", 
        "But, non-Abelian things are more complicated", 
        "than Abelian things.", 
        "Just because it worked for Abelian doesn't mean", 
        "it has to work for non-Abelian.", 
        "We do have the same classical lower bound.", 
        "So remember, when I gave the lower bound", 
        "before I said if you have many subgroups that intersect only", 
        "in the identity, then you have a classical, lower", 
        "bound-- a query lower bound.", 
        "So the classical computer--", 
        "forget even runtime, it just has to make many queries", 
        "to the function f.", 
        "So it takes a long time for classical computers.", 
        "But why should we be at all hopeful", 
        "that quantum computers can solve it?", 
        "", 
        "So one reason for hope is that, in many cases,", 
        "we can do the non-Abelian quantum Fourier transform.", 
        "But that turns out to not be quite enough.", 
        "Let me give you the main argument for hope.", 
        "So the main argument for hope is that, for any non-Abelian--", 
        "any group, Abelian or non, the quantum query complexity", 
        "is order log the size of the group.", 
        "So by query complexity, what I mean", 
        "is there exists a quantum algorithm that", 
        "makes order log G queries to f.", 
        "But I'm not making any statement about its runtime.", 
        "In fact, the algorithm I'll present to you", 
        "has a runtime that is exponential in this number.", 
        "So that part is not so encouraging.", 
        "But at the level of query complexity,", 
        "we already have a separation.", 
        "Because just in terms of queries,", 
        "the number of classical queries is often", 
        "exponentially larger than this.", 
        "So we have an exponential query separation that is provable", 
        "and that works for any group.", 
        "So that fact got a lot of people encouraged", 
        "about improving it to make it not only query efficient", 
        "but also time efficient.", 
        "And I'll report some partial progress there.", 
        "But first I'll present to you this query argument.", 
        "Question?", 
        "The query algorithm for non-Abelian HSP?", 
        "Yes.", 
        "I'm going to tell you the algorithm now.", 
        "So I'm going to now tell you that algorithm, which", 
        "works for any group.", 
        "And then I'm going to talk about a special case", 
        "of the dihedral group, which is like almost as close to cyclic", 
        "as you can get, show how people have", 
        "tried to make it time efficient and how they've", 
        "made partial progress there.", 
        "So first let me talk about the low query algorithm.", 
        "", 
        "The first part is with one query,", 
        "we can do the usual thing.", 
        "We get a superposition over G. And we get f of g.", 
        "Actually, let me call this x, not g.", 
        "Sorry.", 
        "", 
        "And then we can discard f of x.", 
        "And we get a superposition over some level set,", 
        "basically over a coset.", 
        "So then we discard, and we get the state", 
        "rho sub H, which is the average over all group", 
        "elements of this state xH times xH, where if you recall xH", 
        "means the superposition over all h in the subgroup of x times h.", 
        "", 
        "So just like in the Abelian case, we get this coset state,", 
        "which is a mixture over all cosets of our hidden subgroup", 
        "H.", 
        ""
    ]
}