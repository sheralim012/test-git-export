{
    "start": [
        0, 
        0, 
        2000, 
        4000, 
        11000, 
        13000, 
        15000, 
        18000, 
        29000, 
        32000, 
        35000, 
        37000, 
        37000, 
        48000, 
        51000, 
        53000, 
        56000, 
        60000, 
        64000, 
        67000, 
        75000, 
        90000, 
        91000, 
        95000, 
        99000, 
        100000, 
        102000, 
        105000, 
        108000, 
        109000, 
        111000, 
        114000, 
        116000, 
        118000, 
        121000, 
        124000, 
        128000, 
        130000, 
        134000, 
        136000, 
        138000, 
        142000, 
        145000, 
        148000, 
        150000, 
        152000, 
        155000, 
        158000, 
        161000, 
        162000, 
        164000, 
        166000, 
        169000, 
        176000, 
        178000, 
        188000, 
        189000, 
        190000, 
        193000, 
        196000, 
        198000, 
        200000, 
        201000, 
        203000, 
        208000, 
        211000, 
        212000, 
        215000, 
        220000, 
        222000, 
        226000, 
        228000, 
        230000, 
        236000, 
        239000, 
        241000, 
        243000, 
        245000, 
        248000, 
        249000, 
        251000, 
        253000, 
        255000, 
        258000, 
        259000, 
        262000, 
        264000, 
        266000, 
        268000, 
        269000, 
        274000, 
        277000, 
        280000, 
        284000, 
        288000, 
        295000, 
        301000, 
        303000, 
        306000, 
        310000, 
        323000, 
        329000, 
        334000, 
        335000, 
        338000, 
        340000, 
        343000, 
        345000, 
        350000, 
        353000, 
        356000, 
        358000, 
        360000, 
        362000, 
        364000, 
        366000, 
        370000, 
        372000
    ], 
    "end": [
        0, 
        2000, 
        4000, 
        11000, 
        13000, 
        15000, 
        18000, 
        29000, 
        32000, 
        35000, 
        37000, 
        37000, 
        48000, 
        51000, 
        53000, 
        56000, 
        60000, 
        64000, 
        67000, 
        75000, 
        90000, 
        91000, 
        95000, 
        99000, 
        100000, 
        102000, 
        105000, 
        108000, 
        109000, 
        111000, 
        114000, 
        116000, 
        118000, 
        121000, 
        124000, 
        128000, 
        130000, 
        134000, 
        136000, 
        138000, 
        142000, 
        145000, 
        148000, 
        150000, 
        152000, 
        155000, 
        158000, 
        161000, 
        162000, 
        164000, 
        166000, 
        169000, 
        176000, 
        178000, 
        188000, 
        189000, 
        190000, 
        193000, 
        196000, 
        198000, 
        200000, 
        201000, 
        203000, 
        208000, 
        211000, 
        212000, 
        215000, 
        220000, 
        222000, 
        226000, 
        228000, 
        230000, 
        236000, 
        239000, 
        241000, 
        243000, 
        245000, 
        248000, 
        249000, 
        251000, 
        253000, 
        255000, 
        258000, 
        259000, 
        262000, 
        264000, 
        266000, 
        268000, 
        269000, 
        274000, 
        277000, 
        280000, 
        284000, 
        288000, 
        295000, 
        301000, 
        303000, 
        306000, 
        310000, 
        323000, 
        329000, 
        334000, 
        335000, 
        338000, 
        340000, 
        343000, 
        345000, 
        350000, 
        353000, 
        356000, 
        358000, 
        360000, 
        362000, 
        364000, 
        366000, 
        370000, 
        372000, 
        373000
    ], 
    "text": [
        "", 
        "Let me begin by describing the sort of problems", 
        "that we might want to solve.", 
        "In general, when we say that we want", 
        "to compute something, what we mean usually", 
        "is that we're computing a function.", 
        "So there's some function, f, that", 
        "takes its input as a binary string", 
        "and whose output is a binary string.", 
        "When I write 0, 1, star, what I mean", 
        "is the set of strings of any length.", 
        "OK?", 
        "So 0, 1, star means the union over n of 0, 1, to the n.", 
        "This is a compact way of saying, I just", 
        "take in a string of any length and output", 
        "another binary string of any length.", 
        "And because we can encode anything into bits,", 
        "we can put any kind of standard function", 
        "that we're interested in into this paradigm.", 
        "This includes matrix multiplication,", 
        "shortest path in a graph, integer factorization,", 
        "the halting problem.", 
        "", 
        "This last one asks, if you have some code and a given input,", 
        "will that code ever terminate?", 
        "Right, all of these are functions that you", 
        "can define on bit strings.", 
        "And even though a matrix is described in terms of,", 
        "let's say it's a matrix full of integers,", 
        "you can write those integers.", 
        "Or if they are rationals you can write those in terms of bits.", 
        "The real numbers, you can approximate them", 
        "in terms of bits.", 
        "All of these problems, even though their inputs may not", 
        "look a priori like they are in terms of bits,", 
        "you can always encode them in some way.", 
        "And some of these are of course much, much harder than others.", 
        "", 
        "When we're talking about complexity theory,", 
        "the first kind of task that we usually consider", 
        "is computing functions.", 
        "And it's often helpful to simplify to the case", 
        "where the answer is 1-bit.", 
        "Partly to simplify some of the proofs,", 
        "partly it's just conventional.", 
        "And so a lot of what I'll talk to you about today", 
        "are describing conventions in the field of complexity theory", 
        "where they could have defined it a different way,", 
        "but since the literature is mostly", 
        "in terms of a particular convention,", 
        "I want you to be familiar with it.", 
        "", 
        "The usual convention is to talk about a special case", 
        "of functions called languages.", 
        "And what that means is just that the function", 
        "has a 1-bit output.", 
        "OK?", 
        "Instead of outputting a string of any length,", 
        "it just outputs a single bit.", 
        "And this has the same computational power", 
        "as functions--", 
        "I shouldn't say the same.", 
        "Nearly the same computational power", 
        "as a general function, because I could always give this", 
        "1 more input that tells you which bit of the string I'm", 
        "interested in.", 
        "And then, by calling this 1-bit function repeatedly,", 
        "extract all the information from a general function.", 
        "For example, integer factorization.", 
        "I take in a number, I output it's prime factorization.", 
        "That really seems like a function", 
        "with many bits of output.", 
        "But I could say, input a number as well as another index, I,", 
        "and then tell me the Ith bit of the prime factorization.", 
        "So now that's just 1-bit.", 
        "And if I can have access to that function,", 
        "I can call it repeatedly.", 
        "I can read out all the bits of the prime factorization.", 
        "There's a little bit of overhead in that I", 
        "have to call this function many times,", 
        "maybe it's not the most efficient way", 
        "to do it on a computer, but there's not", 
        "a big overhead in moving from the language picture", 
        "to the function picture.", 
        "", 
        "Now you might ask, why do I call it a language just", 
        "because there is a 1-bit output?", 
        "And the reason is, and this is also", 
        "part of what makes it mathematically", 
        "a little bit nicer, if you have a 1-bit output,", 
        "then you can describe the whole function by just specifying", 
        "the set that gets mapped to 0 or the set that get's mapped to 1.", 
        "Let's define L to be f inverse of 1.", 
        "In other words, the set of strings that gets mapped to 1.", 
        "And so we say, L is the language that describes this function,", 
        "and this is a subset of 0, 1, star.", 
        "So instead of talking about a function,", 
        "we could just talk about a subset of strings", 
        "corresponding to the inputs that give rise to 1.", 
        "And we say that to decide of the language,", 
        "we should accept x in the language,", 
        "or reject x not in the language.", 
        "So you would think of this problem", 
        "as, instead of computing a bit, just equivalently,", 
        "you can say it's determining membership in a set.", 
        "If you're in the set, L, you want to accept the input.", 
        "If you're not in the set, L, you want to reject the input.", 
        "Just different terminology for the same basic math.", 
        "You want to output 1, which we call accept,", 
        "or 0, which we call reject.", 
        "And you know, any general problem", 
        "you can phrase as yes or no problem.", 
        "That's all that's going on.", 
        "The language picture is, however, conventional.", 
        "And when we talk about complexity classes,", 
        "I'll mostly talk about it in terms of languages,", 
        "know although you can imagine the other versions.", 
        ""
    ]
}