{
    "start": [
        0, 
        0, 
        1000, 
        3000, 
        6000, 
        11000, 
        22000, 
        25000, 
        34000, 
        36000, 
        37000, 
        43000, 
        45000, 
        48000, 
        54000, 
        58000, 
        62000, 
        65000, 
        68000, 
        76000, 
        79000, 
        80000, 
        82000, 
        86000, 
        89000, 
        99000, 
        102000, 
        104000, 
        106000, 
        109000, 
        115000, 
        117000, 
        120000, 
        123000, 
        128000, 
        133000, 
        139000, 
        141000, 
        146000, 
        150000, 
        152000, 
        157000, 
        159000, 
        163000, 
        166000, 
        170000, 
        173000, 
        178000, 
        182000, 
        187000, 
        195000, 
        201000, 
        211000, 
        215000, 
        217000, 
        220000, 
        221000, 
        222000, 
        225000, 
        228000, 
        233000, 
        237000, 
        240000, 
        246000, 
        249000, 
        253000, 
        258000, 
        260000, 
        265000, 
        266000, 
        269000, 
        273000, 
        293000, 
        300000, 
        302000, 
        305000, 
        307000, 
        309000, 
        311000, 
        315000, 
        320000, 
        324000, 
        327000, 
        328000, 
        332000, 
        333000, 
        337000, 
        343000, 
        350000, 
        356000, 
        361000, 
        367000, 
        370000, 
        374000, 
        379000, 
        381000, 
        386000, 
        391000, 
        393000, 
        395000, 
        402000, 
        406000, 
        409000, 
        411000, 
        415000, 
        419000, 
        421000, 
        423000, 
        427000
    ], 
    "end": [
        0, 
        1000, 
        3000, 
        6000, 
        11000, 
        22000, 
        25000, 
        34000, 
        36000, 
        37000, 
        43000, 
        45000, 
        48000, 
        54000, 
        58000, 
        62000, 
        65000, 
        68000, 
        76000, 
        79000, 
        80000, 
        82000, 
        86000, 
        89000, 
        99000, 
        102000, 
        104000, 
        106000, 
        109000, 
        115000, 
        117000, 
        120000, 
        123000, 
        128000, 
        133000, 
        139000, 
        141000, 
        146000, 
        150000, 
        152000, 
        157000, 
        159000, 
        163000, 
        166000, 
        170000, 
        173000, 
        178000, 
        182000, 
        187000, 
        195000, 
        201000, 
        211000, 
        215000, 
        217000, 
        220000, 
        221000, 
        222000, 
        225000, 
        228000, 
        233000, 
        237000, 
        240000, 
        246000, 
        249000, 
        253000, 
        258000, 
        260000, 
        265000, 
        266000, 
        269000, 
        273000, 
        293000, 
        300000, 
        302000, 
        305000, 
        307000, 
        309000, 
        311000, 
        315000, 
        320000, 
        324000, 
        327000, 
        328000, 
        332000, 
        333000, 
        337000, 
        343000, 
        350000, 
        356000, 
        361000, 
        367000, 
        370000, 
        374000, 
        379000, 
        381000, 
        386000, 
        391000, 
        393000, 
        395000, 
        402000, 
        406000, 
        409000, 
        411000, 
        415000, 
        419000, 
        421000, 
        423000, 
        427000, 
        428000
    ], 
    "text": [
        "", 
        "This is a sketch of the proof.", 
        "I'm not going to prove it rigorously,", 
        "but you'll get the main idea here.", 
        "So, we will do this on classical circuits and classical gates.", 
        "And the main idea is to compute on encoded data,", 
        "and do not decode the data as you're going along.", 
        "", 
        "How do you do that?", 
        "Well, I give you a bit of an idea", 
        "over here with this triple modular redundancy.", 
        "Let me formalize that a little bit", 
        "by constructing this notation.", 
        "This would be a NAND gate, where the output will be x and y,", 
        "bar inverted, and then another gate, which", 
        "we'll call the majority voting gate, and the output of this", 
        "will be the majority of the inputs.", 
        "", 
        "And each one of these gates fails with probability p.", 
        "We will assume for simplicity that they're all", 
        "identical probabilities.", 
        "You can clearly work this out in the case", 
        "where there are non-identical probabilities of failure.", 
        "And the idea for the construction", 
        "is to encode zero as three zeroes, and one as three ones.", 
        "We have this notion of the physical states", 
        "and the logical states.", 
        "Logical zero and logical one will", 
        "be just the triple redundancy code,", 
        "and now we want to perform a NAND gate operation", 
        "on the logical states.", 
        "But what we will actually have coming in,", 
        "I'm going to switch to a and b from x and y,", 
        "so I can use x and y for some other things later,", 
        "is that we will have three wires representing", 
        "a coming in and three wires representing b coming in.", 
        "We will have three NAND gates.", 
        "", 
        "And each one of the NAND gates takes two inputs.", 
        "We will route them like this.", 
        "", 
        "The output of this, unfortunately, we", 
        "have an error, because there may be errors in the input,", 
        "and the way we correct for them is instead of doing", 
        "the single majority voting gate like we have up there,", 
        "we will have three majority voting gates.", 
        "", 
        "And these three, let us assume that we can now", 
        "copy information from wire over one wire to another,", 
        "we'll take inputs copied from each of the outputs of the NAND", 
        "gates, and then we will have three outputs at the end.", 
        "And I claim that this output will be a and b inverted, where", 
        "if there had been a single error in any of the inputs,", 
        "or if there had been a single gate failure,", 
        "then we would have corrected that, because of the majority", 
        "voting.", 
        "And we can guarantee that there is at most", 
        "one error in the output.", 
        "And so the probability of failure of the output", 
        "is going to be lower than p.", 
        "What we have is a construction that has two parts.", 
        "This first part is like a logical gate.", 
        "", 
        "A gate acting on the encoded data.", 
        "The second part here is the error correction.", 
        "", 
        "And we want to compute the probability of failure.", 
        "", 
        "We want to compute the probability", 
        "of failure of this whole circuit construction.", 
        "", 
        "So the output is incorrect only if two or more", 
        "of the gates, the n's and m's fail.", 
        "For simplicity, I'm going to omit", 
        "the discussion about the input errors from this,", 
        "but that also can be done.", 
        "Let's just assume what happens, analyze", 
        "what happens when gates fail.", 
        "So if two or more gates fail, we can see,", 
        "and this is a bound, so if two gates happen", 
        "to be good gates that fail, adding the same error,", 
        "then maybe the output is not going to be wrong.", 
        "But you can see that there are many ways", 
        "in which if two gates fail, the output definitely is wrong.", 
        "And so let's bound that.", 
        "The number of ways that two gates can fail", 
        "is six, choose two because there are six gates in this circuit.", 
        "And this is the number of possibilities,", 
        "and this is six times five, divided by two, which is 15,", 
        "and so the probability of failure of the circuit", 
        "is going to go like 15p squared.", 
        "And if our goal is to make this less than p,", 
        "then we find that, maybe we could say that the threshold", 
        "probability is one over 15.", 
        "That's kind of remarkable, because one over 15", 
        "is already better than, for example, one-third.", 
        "Now, there are some concerns about this.", 
        "Again, I have to show you that we can make", 
        "an arbitrary sized circuit.", 
        "And so far I've done what we will call a level one encoding.", 
        "", 
        "So the main idea that I'm going to show you next", 
        "is how you can recurse on this encoding", 
        "and build a fault tolerant circuit of arbitrary size,", 
        "but keep in mind that this argument about recursion", 
        "is just one use for the proof, and there", 
        "are many other techniques by which you in principle,", 
        "could get to fault tolerance and to prove the theorem.", 
        ""
    ]
}