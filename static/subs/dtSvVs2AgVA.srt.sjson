{
    "start": [
        0, 
        0, 
        1000, 
        5000, 
        9000, 
        11000, 
        13000, 
        17000, 
        19000, 
        24000, 
        27000, 
        31000, 
        34000, 
        36000, 
        39000, 
        42000, 
        46000, 
        48000, 
        58000, 
        62000, 
        67000, 
        71000, 
        73000, 
        75000, 
        77000, 
        80000, 
        84000, 
        88000, 
        93000, 
        101000, 
        102000, 
        105000, 
        108000, 
        111000, 
        116000, 
        120000, 
        124000, 
        127000, 
        130000, 
        135000, 
        144000, 
        153000, 
        156000, 
        161000, 
        165000, 
        173000, 
        189000, 
        193000, 
        197000, 
        200000, 
        203000, 
        211000, 
        215000, 
        217000, 
        220000, 
        222000, 
        227000, 
        229000, 
        232000, 
        235000, 
        237000, 
        239000, 
        241000, 
        244000, 
        246000, 
        247000, 
        251000, 
        253000, 
        256000
    ], 
    "end": [
        0, 
        1000, 
        5000, 
        9000, 
        11000, 
        13000, 
        17000, 
        19000, 
        24000, 
        27000, 
        31000, 
        34000, 
        36000, 
        39000, 
        42000, 
        46000, 
        48000, 
        58000, 
        62000, 
        67000, 
        71000, 
        73000, 
        75000, 
        77000, 
        80000, 
        84000, 
        88000, 
        93000, 
        101000, 
        102000, 
        105000, 
        108000, 
        111000, 
        116000, 
        120000, 
        124000, 
        127000, 
        130000, 
        135000, 
        144000, 
        153000, 
        156000, 
        161000, 
        165000, 
        173000, 
        189000, 
        193000, 
        197000, 
        200000, 
        203000, 
        211000, 
        215000, 
        217000, 
        220000, 
        222000, 
        227000, 
        229000, 
        232000, 
        235000, 
        237000, 
        239000, 
        241000, 
        244000, 
        246000, 
        247000, 
        251000, 
        253000, 
        256000, 
        258000
    ], 
    "text": [
        "", 
        "What are the principles under which", 
        "were are able to construct a theorem about fault tolerance?", 
        "I went to abstract a series of ideas from this construction,", 
        "so that we can see if we can apply them", 
        "to the quantum circuit case.", 
        "I contend that one of the main ideas behind this theorem", 
        "and construction is that we have arrived", 
        "at this expression for our A threshold, which reads as 1", 
        "over the number of fault paths.", 
        "", 
        "And here, I am defining the idea of fault paths", 
        "as being the number of ways by which we", 
        "can combine failure probabilities to make", 
        "the circuit system fail.", 
        "Not defining it formally, but you have got the idea.", 
        "But one of the key things is that this", 
        "is the number of fault paths in a universal gate construction.", 
        "", 
        "For example, we couldn't have made just an inverter,", 
        "and then expected to extrapolate and get a threshold", 
        "probability, because the inverter by itself", 
        "is not universal.", 
        "So I use a NAND gate, and you know", 
        "from classical Boolean algebra, that any Boolean function", 
        "can be constructed out of NAND gates composite appropriately.", 
        "So we need to consider a family of universal gates,", 
        "or at least one gate from which any circuit can be constructed.", 
        "And the second idea is that this has to be in a fault tolerant", 
        "procedure.", 
        "", 
        "And the concept of a fault tolerant procedure", 
        "is something which I now want to be able to describe.", 
        "Let me define this, a fault tolerant procedure.", 
        "", 
        "And this is essentially going to be the concept of how", 
        "we control error propagation, and minimize", 
        "the number of fault pass.", 
        "A fault tolerant procedure, let me reverse this logic.", 
        "I'm going to say, a procedure is fault tolerant if a single", 
        "component failure, like one of the NAND gates,", 
        "or one of the majority voting gates,", 
        "must not cascade and cause more errors that you cannot correct.", 
        "So we will say that a procedure is fault tolerant", 
        "if a single component failure causes at most one", 
        "error in each coded block of bits in the output.", 
        "", 
        "And there are two main ideas here.", 
        "First, the reason I'm focusing on one error", 
        "is because we're looking only currently", 
        "in the discussion at codes correcting one error.", 
        "You can choose other higher rate codes,", 
        "which can correct for more errors,", 
        "and then generalize this theorem.", 
        "And the reason we're thinking about each encoded block", 
        "is because each one of the data blocks", 
        "is a separate code right now.", 
        "You could also conceive of encoding all of the data", 
        "with multiple bits inside one code.", 
        "That also changes this definition,", 
        "but you can generalize again fairly easily.", 
        "So for example, in our construction", 
        "up here, this has one output block.", 
        "But we might have a different construction", 
        "with two output blocks.", 
        "And we'd only want a maximum of one error in each one", 
        "of those blocks separately.", 
        "So this is all about error propagation.", 
        ""
    ]
}