{
    "start": [
        0, 
        0, 
        2000, 
        4000, 
        7000, 
        10000, 
        14000, 
        18000, 
        21000, 
        23000, 
        25000, 
        29000, 
        31000, 
        40000, 
        56000, 
        58000, 
        60000, 
        63000, 
        65000, 
        68000, 
        70000, 
        72000, 
        76000, 
        80000, 
        83000, 
        86000, 
        87000, 
        92000, 
        104000, 
        107000, 
        109000, 
        112000, 
        116000, 
        120000, 
        124000, 
        126000, 
        132000, 
        138000, 
        144000, 
        147000, 
        151000, 
        158000, 
        163000, 
        174000, 
        179000, 
        182000, 
        187000, 
        199000, 
        207000, 
        212000, 
        215000, 
        224000, 
        229000, 
        230000, 
        234000, 
        236000, 
        239000, 
        244000, 
        250000, 
        256000, 
        260000, 
        262000, 
        264000, 
        265000, 
        270000, 
        273000, 
        273000, 
        277000, 
        282000, 
        285000, 
        294000, 
        296000, 
        298000, 
        301000, 
        304000, 
        307000, 
        310000, 
        315000, 
        317000, 
        320000, 
        321000, 
        324000, 
        327000, 
        329000, 
        333000, 
        335000, 
        337000, 
        340000, 
        344000, 
        345000, 
        347000, 
        352000, 
        353000, 
        355000, 
        359000, 
        363000, 
        365000, 
        367000, 
        369000
    ], 
    "end": [
        0, 
        2000, 
        4000, 
        7000, 
        10000, 
        14000, 
        18000, 
        21000, 
        23000, 
        25000, 
        29000, 
        31000, 
        40000, 
        56000, 
        58000, 
        60000, 
        63000, 
        65000, 
        68000, 
        70000, 
        72000, 
        76000, 
        80000, 
        83000, 
        86000, 
        87000, 
        92000, 
        104000, 
        107000, 
        109000, 
        112000, 
        116000, 
        120000, 
        124000, 
        126000, 
        132000, 
        138000, 
        144000, 
        147000, 
        151000, 
        158000, 
        163000, 
        174000, 
        179000, 
        182000, 
        187000, 
        199000, 
        207000, 
        212000, 
        215000, 
        224000, 
        229000, 
        230000, 
        234000, 
        236000, 
        239000, 
        244000, 
        250000, 
        256000, 
        260000, 
        262000, 
        264000, 
        265000, 
        270000, 
        273000, 
        273000, 
        277000, 
        282000, 
        285000, 
        294000, 
        296000, 
        298000, 
        301000, 
        304000, 
        307000, 
        310000, 
        315000, 
        317000, 
        320000, 
        321000, 
        324000, 
        327000, 
        329000, 
        333000, 
        335000, 
        337000, 
        340000, 
        344000, 
        345000, 
        347000, 
        352000, 
        353000, 
        355000, 
        359000, 
        363000, 
        365000, 
        367000, 
        369000, 
        373000
    ], 
    "text": [
        "", 
        "More generally the third type of example code,", 
        "a concatenated code.", 
        "To explain what a concatenated code is even though we've", 
        "sort of moved away from using encoding maps", 
        "I wanted to go back to using them for a minute.", 
        "I said up here that if a code has distance d,", 
        "it means that it corrects poly errors up", 
        "to d-minus 1 over 2 positions.", 
        "And so just like in the classical case", 
        "we can talk about codes that have distance d and code k", 
        "qubits into n qubits.", 
        "And so we call these n, k, d codes", 
        "encode k qubits into n qubits and have distance d.", 
        "You know, distance in this kind of funny sense", 
        "that I mentioned, you can correct up", 
        "to d-minus 1 over 2 errors.", 
        "And classically, we would denote this", 
        "by putting one set of brackets.", 
        "Quantumly, it's not a very creative notation.", 
        "We just do a double bracket.", 
        "And that means a quantum code with those properties.", 
        "OK so now let me talk about concatenated codes.", 
        "Let's suppose that C1--", 
        "", 
        "we have two codes.", 
        "Now C1 is an n1, k1, d1 code.", 
        "And we'll say within coding map, e1.", 
        "That's my [INAUDIBLE] that does the encoding.", 
        "And let's suppose I have another code, C2.", 
        "", 
        "And this will be a little less general.", 
        "It will use n2 qubits but will encode--", 
        "it will take as input only one qubit.", 
        "And it will have distance d2.", 
        "", 
        "And we'll define its encoding map to be e2.", 
        "", 
        "OK, so I have two different codes.", 
        "And the idea of a concatenated code", 
        "is, we start with a block of k1 qubits.", 
        "", 
        "We encode it into n1 qubits, using map e1.", 
        "And then maybe I'll draw the single arrow.", 
        "", 
        "We take each of these qubits and further encode it using e2.", 
        "So this qubit, this is a block of n2,", 
        "this is another block of n2, and so on.", 
        "So the total is n1, n2 qubits.", 
        "", 
        "And so the code that we're left with uses n1, n2 two qubits.", 
        "It encodes the initial k1.", 
        "So we have some loss of rate here.", 
        "", 
        "And the appeal of these codes is,", 
        "the distance just multiplies.", 
        "So if you want to cause an error on the final, after decoding,", 
        "then you need to screw up d1 minus 1 over 2 positions here.", 
        "But each position here, you need to damage", 
        "at least enough positions in each one of these sub-blocks.", 
        "That by itself is not quite a complete argument", 
        "but it suggests why the distances roughly", 
        "should multiply.", 
        "", 
        "Actually let me just mention what the combined encoding", 
        "map is.", 
        "", 
        "So the encoding map is e1 followed by n1 copies of e2.", 
        "", 
        "And so the distances multiply, although I have not", 
        "given you an argument for that.", 
        "But the error correcting properties also", 
        "combine even if they fall short of distance.", 
        "So this is the idea of the Shor code,", 
        "if we want to concatenate this 000111 code,", 
        "the 3-bit repetition code in the standard basis,", 
        "with a three bit repetition code in the plus minus basis.", 
        "Neither of them really has any non-trivial distance", 
        "in the usual quantum sense.", 
        "But the first one corrects x errors,", 
        "the second one corrects z errors.", 
        "And the concatenation you can verify", 
        "corrects both types of errors.", 
        "So the Shor code is an example of a concatenated code.", 
        "In general there are many other examples.", 
        "So kind of the first route to fault tolerance", 
        "that was proposed was based on concatenated codes.", 
        "You start with a small code, concatenate it with itself,", 
        "and you can prove things.", 
        "And you keep on concatenating.", 
        "And if your error rate is low enough you've reduced errors.", 
        "You make progress against the errors.", 
        "As you make the code bigger and bigger,", 
        "even though there are more places for an error to appear,", 
        "the overall rate of logical errors should go down.", 
        "Recently, people have started to believe", 
        "this might not be the most efficient way of doing things.", 
        "But it is a nice conceptually simple way", 
        ""
    ]
}