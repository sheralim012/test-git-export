{
    "start": [
        0, 
        0, 
        2000, 
        6000, 
        7000, 
        10000, 
        20000, 
        33000, 
        39000, 
        51000, 
        54000, 
        60000, 
        61000, 
        66000, 
        78000, 
        80000, 
        83000, 
        86000, 
        88000, 
        90000, 
        91000, 
        94000, 
        96000, 
        104000, 
        105000, 
        106000, 
        108000, 
        122000, 
        125000, 
        130000, 
        136000, 
        141000, 
        146000, 
        148000, 
        156000, 
        162000, 
        178000, 
        190000, 
        193000, 
        197000, 
        199000, 
        200000, 
        202000, 
        207000, 
        211000, 
        212000, 
        215000, 
        219000, 
        222000, 
        227000, 
        239000, 
        250000, 
        257000, 
        259000, 
        262000, 
        271000, 
        273000, 
        277000, 
        281000, 
        286000, 
        291000, 
        294000, 
        296000, 
        300000, 
        303000, 
        305000, 
        309000, 
        313000, 
        315000, 
        324000, 
        327000, 
        330000, 
        331000, 
        334000, 
        345000, 
        347000, 
        348000, 
        352000, 
        356000, 
        358000, 
        359000, 
        361000, 
        371000, 
        374000, 
        376000, 
        381000, 
        396000, 
        398000, 
        401000, 
        408000, 
        415000, 
        419000, 
        428000, 
        430000, 
        432000, 
        433000, 
        436000, 
        438000, 
        440000, 
        443000, 
        445000, 
        447000, 
        450000, 
        452000, 
        454000, 
        458000, 
        460000, 
        464000, 
        470000, 
        472000, 
        475000, 
        476000, 
        480000, 
        482000, 
        485000
    ], 
    "end": [
        0, 
        2000, 
        6000, 
        7000, 
        10000, 
        20000, 
        33000, 
        39000, 
        51000, 
        54000, 
        60000, 
        61000, 
        66000, 
        78000, 
        80000, 
        83000, 
        86000, 
        88000, 
        90000, 
        91000, 
        94000, 
        96000, 
        104000, 
        105000, 
        106000, 
        108000, 
        122000, 
        125000, 
        130000, 
        136000, 
        141000, 
        146000, 
        148000, 
        156000, 
        162000, 
        178000, 
        190000, 
        193000, 
        197000, 
        199000, 
        200000, 
        202000, 
        207000, 
        211000, 
        212000, 
        215000, 
        219000, 
        222000, 
        227000, 
        239000, 
        250000, 
        257000, 
        259000, 
        262000, 
        271000, 
        273000, 
        277000, 
        281000, 
        286000, 
        291000, 
        294000, 
        296000, 
        300000, 
        303000, 
        305000, 
        309000, 
        313000, 
        315000, 
        324000, 
        327000, 
        330000, 
        331000, 
        334000, 
        345000, 
        347000, 
        348000, 
        352000, 
        356000, 
        358000, 
        359000, 
        361000, 
        371000, 
        374000, 
        376000, 
        381000, 
        396000, 
        398000, 
        401000, 
        408000, 
        415000, 
        419000, 
        428000, 
        430000, 
        432000, 
        433000, 
        436000, 
        438000, 
        440000, 
        443000, 
        445000, 
        447000, 
        450000, 
        452000, 
        454000, 
        458000, 
        460000, 
        464000, 
        470000, 
        472000, 
        475000, 
        476000, 
        480000, 
        482000, 
        485000, 
        486000
    ], 
    "text": [
        "", 
        "Before I get into quantum algorithms,", 
        "let me briefly mention that this is in general hard classically.", 
        "And because it's an oracle problem,", 
        "we can get a provable lower bound.", 
        "So I claim-- so let me say theorem, not claim, theorem.", 
        "If g contains subgroups, let's say, h1 through h sub--", 
        "I'll say sub n, so n different subgroups,", 
        "such that for any distinct subgroups in the list,", 
        "their intersection is only the identity element.", 
        "So this means e is sometimes used to mean the identity", 
        "element of a group.", 
        "", 
        "Then you classically need omega root n queries", 
        "to solve the hidden subgroup problem.", 
        "And this is a query complexity lower bound,", 
        "but that also implies a time complexity lower bound.", 
        "Because the amount of runtime I need", 
        "is at least the number of queries.", 
        "So the proof is very easy.", 
        "", 
        "I'm going to cheat a little bit, actually.", 
        "I'm going to assume that the queries are not adaptive.", 
        "But you can--", 
        "I'll assume that for now and then", 
        "and then come back and modify it.", 
        "So suppose that we query x1, x2, through x sub k.", 
        "", 
        "And then what do we want?", 
        "We want to know if what this h is,", 
        "and h tells me when f takes on the same value.", 
        "And what I claim is that what's probably going to happen", 
        "is that all the values will be distinct.", 
        "", 
        "So let's look at the case when f of xi is equal to xj.", 
        "This is true if and only if xi xj inverse is in some h sub a,", 
        "let's say, for a on this list.", 
        "Let's suppose for simplicity that the subgroup is only", 
        "going to be one of the ones from this list.", 
        "We're designing a hard instance of the problem,", 
        "so we always have--", 
        "there's always that possibility.", 
        "", 
        "So essentially what we're doing by making these queries", 
        "is we're testing--", 
        "", 
        "we get to look at the-- for each xi, xj inverse, we get to see", 
        "does the function agree on those values or not?", 
        "", 
        "So if we make k queries, we only check", 
        "k choose two of these pairs, of these xi, xj inverse pairs.", 
        "And so if there are n of the subgroups,", 
        "we've only learned about k choose two of them.", 
        "", 
        "So we need to check order and sub groups.", 
        "So let's suppose--", 
        "I guess I should have said this earlier--", 
        "suppose that h is equal to h sub a for a--", 
        "", 
        "you know, drawn uniformly from 1 through n.", 
        "Then if we check k choose two of these,", 
        "and k choose two is much less than n,", 
        "we're probably not going to hit the subgroup that we want.", 
        "So it's probably going to be true that this condition is", 
        "never satisfied.", 
        "And we'd only see a bunch of distinct values of f.", 
        "And so when is k chose two smaller than n?", 
        "", 
        "So the algorithm fails if k is much less than root n.", 
        "So this implies that there's a root n lower bound.", 
        "You need at least root n to have a chance of seeing", 
        "the correct sub group.", 
        "", 
        "And since n can be exponentially large,", 
        "this can be an exponential lower bound.", 
        "So an example.", 
        "", 
        "So how many people remember Simon's algorithm?", 
        "Raise your hand.", 
        "Some, OK.", 
        "Maybe I'll review it.", 
        "So Simon's algorithm, the group is z2 to the n.", 
        "", 
        "So it's 2 to the n elements.", 
        "And a family of subgroups we could use.", 
        "So for any x in x2 to the n, the set 0 comma x is a subgroup.", 
        "Because x plus x is equal to 0.", 
        "So it's just a two element subgroup.", 
        "And there are 2 to the n minus 1 of these,", 
        "and they intersect only at 0.", 
        "So that implies an omega 2 to the n", 
        "over 2 classical lower bound.", 
        "I haven't said what Simon's algorithm is.", 
        "So Simon's algorithm is a quantum algorithm", 
        "to solve this.", 
        "And I'll come back and describe that later.", 
        "I just want to for now convince of the quantum", 
        "hardness of the problem.", 
        "I should mention, by the way, I assumed non-adaptive queries.", 
        "But the argument you can see would", 
        "extend to adaptive, as well.", 
        "Because in the case where you've queried too few times,", 
        "you've learned nothing.", 
        "All you've learned is you've ruled out--", 
        "not nothing, all you've done is ruled out certain things.", 
        "But in the case when you're not seeing enough,", 
        "you're always seeing distinct values of f of x.", 
        "And so whether your queries are adaptive or non-adaptive,", 
        "the same argument applies.", 
        "Another way of saying it is after I've done k queries,", 
        "I haven't given any information that", 
        "would help me make my next query more informative.", 
        "At least, no more informative than--", 
        "like it's not going to help me beat that bound, for example.", 
        ""
    ]
}