{
    "start": [
        0, 
        0, 
        5000, 
        10000, 
        13000, 
        21000, 
        23000, 
        26000, 
        27000, 
        38000, 
        45000, 
        51000, 
        53000, 
        56000, 
        65000, 
        67000, 
        71000, 
        75000, 
        76000, 
        80000, 
        81000, 
        84000, 
        86000, 
        90000, 
        91000, 
        96000, 
        98000, 
        105000, 
        106000, 
        110000, 
        111000, 
        116000, 
        118000, 
        123000, 
        134000, 
        136000, 
        145000, 
        149000, 
        155000, 
        160000, 
        162000, 
        165000, 
        168000, 
        172000, 
        174000, 
        177000, 
        179000, 
        182000, 
        185000, 
        186000, 
        192000, 
        194000, 
        201000, 
        204000, 
        205000, 
        213000, 
        214000, 
        216000, 
        234000, 
        236000, 
        247000, 
        250000, 
        251000, 
        255000, 
        259000, 
        262000, 
        267000, 
        270000, 
        272000, 
        276000, 
        282000, 
        285000, 
        289000, 
        292000, 
        295000, 
        306000, 
        309000, 
        312000, 
        316000, 
        318000, 
        327000, 
        331000, 
        332000, 
        336000, 
        339000, 
        342000, 
        344000, 
        346000, 
        353000, 
        360000, 
        362000, 
        371000, 
        372000, 
        377000, 
        380000, 
        384000, 
        388000, 
        390000, 
        396000, 
        403000, 
        403000, 
        407000, 
        408000, 
        410000, 
        412000, 
        413000, 
        416000, 
        419000, 
        424000, 
        427000, 
        429000, 
        429000, 
        432000, 
        435000, 
        437000, 
        442000, 
        445000, 
        447000, 
        451000, 
        457000, 
        460000, 
        462000, 
        462000, 
        465000, 
        467000, 
        470000, 
        471000, 
        475000, 
        479000, 
        481000, 
        485000, 
        488000, 
        490000, 
        492000, 
        495000, 
        498000, 
        500000, 
        503000, 
        505000, 
        508000, 
        510000, 
        515000, 
        517000
    ], 
    "end": [
        0, 
        5000, 
        10000, 
        13000, 
        21000, 
        23000, 
        26000, 
        27000, 
        38000, 
        45000, 
        51000, 
        53000, 
        56000, 
        65000, 
        67000, 
        71000, 
        75000, 
        76000, 
        80000, 
        81000, 
        84000, 
        86000, 
        90000, 
        91000, 
        96000, 
        98000, 
        105000, 
        106000, 
        110000, 
        111000, 
        116000, 
        118000, 
        123000, 
        134000, 
        136000, 
        145000, 
        149000, 
        155000, 
        160000, 
        162000, 
        165000, 
        168000, 
        172000, 
        174000, 
        177000, 
        179000, 
        182000, 
        185000, 
        186000, 
        192000, 
        194000, 
        201000, 
        204000, 
        205000, 
        213000, 
        214000, 
        216000, 
        234000, 
        236000, 
        247000, 
        250000, 
        251000, 
        255000, 
        259000, 
        262000, 
        267000, 
        270000, 
        272000, 
        276000, 
        282000, 
        285000, 
        289000, 
        292000, 
        295000, 
        306000, 
        309000, 
        312000, 
        316000, 
        318000, 
        327000, 
        331000, 
        332000, 
        336000, 
        339000, 
        342000, 
        344000, 
        346000, 
        353000, 
        360000, 
        362000, 
        371000, 
        372000, 
        377000, 
        380000, 
        384000, 
        388000, 
        390000, 
        396000, 
        403000, 
        403000, 
        407000, 
        408000, 
        410000, 
        412000, 
        413000, 
        416000, 
        419000, 
        424000, 
        427000, 
        429000, 
        429000, 
        432000, 
        435000, 
        437000, 
        442000, 
        445000, 
        447000, 
        451000, 
        457000, 
        460000, 
        462000, 
        462000, 
        465000, 
        467000, 
        470000, 
        471000, 
        475000, 
        479000, 
        481000, 
        485000, 
        488000, 
        490000, 
        492000, 
        495000, 
        498000, 
        500000, 
        503000, 
        505000, 
        508000, 
        510000, 
        515000, 
        517000, 
        520000
    ], 
    "text": [
        "", 
        "For classical codes, we had that a code, let's say, C classical,", 
        "is a subset of 0, 1 to the n.", 
        "A quantum code, I'll call it C, is", 
        "a subspace of the space of all n qubit states.", 
        "And when I write less than or equal to here,", 
        "it really depends on context.", 
        "But what I'm talking about vector spaces,", 
        "this means that we have a linear subspace.", 
        "And this is already, you could say, a non-trivial assumption.", 
        "I've already ruled out some kind of nonlinear encoding,", 
        "like the encoding--", 
        "", 
        "let's say I have an encoding map that takes psi tensor psi.", 
        "This is not a linear encoding.", 
        "The image of this is not a linear vector space.", 
        "So this is not an allowable quantum code.", 
        "By the standard definition.", 
        "", 
        "You could imagine things like this", 
        "might be useful for detecting quantum information.", 
        "But they also present a lot of problems.", 
        "And so I'm generally not going to explore them in this class.", 
        "OK.", 
        "So that's our first key assumption about them.", 
        "", 
        "And then-- once you have a linear subspace, then, just", 
        "like in classical codes, we can talk", 
        "about encoding and decoding maps.", 
        "So the encoding map--", 
        "", 
        "in general, it could be a quantum operation,", 
        "but we might as well just think of it as an isometry.", 
        "So an isometry, call it E, that maps a k qubit space", 
        "to an n qubit space.", 
        "So we say that C encodes k qubits.", 
        "So since our-- and we can write, C, of course,", 
        "is the image of the encoding map.", 
        "Because our code is linear, we can also specify it this way.", 
        "Of course, just like in the classical case,", 
        "we would like that E can be done efficiently,", 
        "but mathematically, we can still define codes even if it's hard", 
        "to implement these E's.", 
        "For example, in the classical case, we talked about--", 
        "you could imagine a code that's just a random set.", 
        "In the quantum case, you can get pretty far", 
        "by imagining a code that's a random subspace.", 
        "They have very nice information theoretic properties,", 
        "even if they're hard to construct.", 
        "", 
        "So we have an encoding map.", 
        "We should also have a decoding map.", 
        "", 
        "And it's sort of conventional to refer", 
        "to this not as D but as R, so we could call it a recovery map.", 
        "There's nothing special about the term,", 
        "it's just conventional.", 
        "And so R is a quantum operation that", 
        "takes in a density matrix on your code space", 
        "and outputs the density matrix on your original--", 
        "", 
        "actually, I'm sorry.", 
        "I think I-- sorry, let me change this.", 
        "Let me use the term recovery to mean something else.", 
        "And I will use D for decoding map.", 
        "", 
        "Since I've introduced recovery, let me now mention what I--", 
        "the way that I want to use recovery.", 
        "So we can also define the recovery map", 
        "R that keeps your space the same dimension.", 
        "", 
        "And where the goal is to take some encoded data that", 
        "has had noise applied to it and get rid of the noise,", 
        "while leaving the data encoded.", 
        "So-- I'll say in a minute how those should apply.", 
        "", 
        "To talk about how the decoding and recovery", 
        "maps should operate, I have to talk about noise.", 
        "So the idea of both of these is that they", 
        "should correct some noise N, which,", 
        "of course, is a quantum operation that", 
        "acts on the encoded data.", 
        "", 
        "And in the classical case, we've said, you take k bits,", 
        "you map them to n bits, you do some noise on the n bits,", 
        "and then you can correctly map them back", 
        "to the original k bits.", 
        "And so that-- the same condition for quantum codes, so quantum--", 
        "", 
        "What quantum error correction looks", 
        "like is that, if I start with the state rho, I encode it.", 
        "Actually, let me just--", 
        "", 
        "hope this doesn't abuse notation too much.", 
        "Maybe I'll use a script E to mean", 
        "the encoding super operator, whereas just regular capital", 
        "E is the isometry.", 
        "So if I encode rho, then apply noise to it,", 
        "and then decode it, I should recover my original state rho.", 
        "OK.", 
        "So that's the quantum analog of what", 
        "we saw for classical error correcting code,", 
        "to be able to correct a set of errors.", 
        "This is what it means for quantum code", 
        "to be able to correct a set of errors.", 
        "", 
        "And the difference between the decoding and recovery map", 
        "is the decoding is supposed to spit out the original state.", 
        "And the recovery map is supposed to output the encoded state", 
        "without noise.", 
        "So the recovery map--", 
        "", 
        "again, you apply it to the encoding", 
        "of the state followed by noise.", 
        "But now, it's supposed to spit out the encoded state.", 
        "", 
        "Can anyone think of an example why this would be preferable?", 
        "Why do you prefer the recovery map over the decoding map?", 
        "Because after all, you want to operate on the original data.", 
        "Why would I want to not go all the way there and just", 
        "recover, not actually decode?", 
        "That's right.", 
        "So if you think you're going to incur further noise,", 
        "you don't want to go all the way to this unprotected state,", 
        "you want to keep it protected, like in the relaying signal", 
        "example.", 
        "And a closely related example is computing.", 
        "So if I'm doing fault tolerant quantum computing,", 
        "I want to work with encoded data.", 
        "And that's going to protect it against noise.", 
        "Once some noise occurs, I want to get rid of the noise,", 
        "but unless I'm at the end of the computation,", 
        "I don't want to actually decode.", 
        "I want to keep it encoded, just get rid of the noise,", 
        "and so just do a recovery map.", 
        "In fact, it turns out, in fault tolerant quantum computing,", 
        "you'll never decode.", 
        "At the end, when you are ready to measure it,", 
        "you'll do a measurement directly on the encoded state.", 
        "We'll talk a bit later how that works.", 
        "And you'll only do recovery maps.", 
        "In fact, in some cases, you don't even encode either.", 
        ""
    ]
}