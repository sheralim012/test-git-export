{
    "start": [
        0, 
        0, 
        3000, 
        4000, 
        6000, 
        9000, 
        17000, 
        18000, 
        21000, 
        25000, 
        31000, 
        36000, 
        39000, 
        41000, 
        44000, 
        48000, 
        51000, 
        54000, 
        54000, 
        56000, 
        59000, 
        67000, 
        73000, 
        77000, 
        79000, 
        83000, 
        85000, 
        90000, 
        102000, 
        107000, 
        118000, 
        120000, 
        124000, 
        127000, 
        132000, 
        134000, 
        138000, 
        143000, 
        145000, 
        147000, 
        160000, 
        163000, 
        165000, 
        169000, 
        172000, 
        175000, 
        179000, 
        180000, 
        181000, 
        184000, 
        185000, 
        186000, 
        187000, 
        190000, 
        191000, 
        197000, 
        201000, 
        204000, 
        206000, 
        211000, 
        213000, 
        216000, 
        217000, 
        219000, 
        222000, 
        224000, 
        227000, 
        227000, 
        228000, 
        229000, 
        230000, 
        233000, 
        235000, 
        237000, 
        240000, 
        243000, 
        246000, 
        247000, 
        250000, 
        252000, 
        253000, 
        262000, 
        266000, 
        270000, 
        271000, 
        273000, 
        275000, 
        277000, 
        279000, 
        283000, 
        283000, 
        289000, 
        292000, 
        295000, 
        298000, 
        303000, 
        305000, 
        307000, 
        310000, 
        313000, 
        318000, 
        320000, 
        330000, 
        333000, 
        339000, 
        346000, 
        350000, 
        354000, 
        357000, 
        366000, 
        369000, 
        374000, 
        376000, 
        379000, 
        382000, 
        385000, 
        388000, 
        390000, 
        392000, 
        397000, 
        400000, 
        402000, 
        406000, 
        411000, 
        413000, 
        416000, 
        420000, 
        421000, 
        422000, 
        426000, 
        429000, 
        432000, 
        436000, 
        438000, 
        441000, 
        445000, 
        446000, 
        448000, 
        451000, 
        454000, 
        457000, 
        459000, 
        460000, 
        462000, 
        465000, 
        468000, 
        470000, 
        473000, 
        475000, 
        477000, 
        480000, 
        482000, 
        483000, 
        485000, 
        489000, 
        490000, 
        492000, 
        494000, 
        497000, 
        498000, 
        503000, 
        506000, 
        507000, 
        512000, 
        516000, 
        525000, 
        528000, 
        531000, 
        533000, 
        537000
    ], 
    "end": [
        0, 
        3000, 
        4000, 
        6000, 
        9000, 
        17000, 
        18000, 
        21000, 
        25000, 
        31000, 
        36000, 
        39000, 
        41000, 
        44000, 
        48000, 
        51000, 
        54000, 
        54000, 
        56000, 
        59000, 
        67000, 
        73000, 
        77000, 
        79000, 
        83000, 
        85000, 
        90000, 
        102000, 
        107000, 
        118000, 
        120000, 
        124000, 
        127000, 
        132000, 
        134000, 
        138000, 
        143000, 
        145000, 
        147000, 
        160000, 
        163000, 
        165000, 
        169000, 
        172000, 
        175000, 
        179000, 
        180000, 
        181000, 
        184000, 
        185000, 
        186000, 
        187000, 
        190000, 
        191000, 
        197000, 
        201000, 
        204000, 
        206000, 
        211000, 
        213000, 
        216000, 
        217000, 
        219000, 
        222000, 
        224000, 
        227000, 
        227000, 
        228000, 
        229000, 
        230000, 
        233000, 
        235000, 
        237000, 
        240000, 
        243000, 
        246000, 
        247000, 
        250000, 
        252000, 
        253000, 
        262000, 
        266000, 
        270000, 
        271000, 
        273000, 
        275000, 
        277000, 
        279000, 
        283000, 
        283000, 
        289000, 
        292000, 
        295000, 
        298000, 
        303000, 
        305000, 
        307000, 
        310000, 
        313000, 
        318000, 
        320000, 
        330000, 
        333000, 
        339000, 
        346000, 
        350000, 
        354000, 
        357000, 
        366000, 
        369000, 
        374000, 
        376000, 
        379000, 
        382000, 
        385000, 
        388000, 
        390000, 
        392000, 
        397000, 
        400000, 
        402000, 
        406000, 
        411000, 
        413000, 
        416000, 
        420000, 
        421000, 
        422000, 
        426000, 
        429000, 
        432000, 
        436000, 
        438000, 
        441000, 
        445000, 
        446000, 
        448000, 
        451000, 
        454000, 
        457000, 
        459000, 
        460000, 
        462000, 
        465000, 
        468000, 
        470000, 
        473000, 
        475000, 
        477000, 
        480000, 
        482000, 
        483000, 
        485000, 
        489000, 
        490000, 
        492000, 
        494000, 
        497000, 
        498000, 
        503000, 
        506000, 
        507000, 
        512000, 
        516000, 
        525000, 
        528000, 
        531000, 
        533000, 
        537000, 
        540000
    ], 
    "text": [
        "", 
        "I want to talk about more general classical error", 
        "correcting codes.", 
        "", 
        "And to make progress on this, what I've written down", 
        "was extremely general, to make progress let me not", 
        "worry about efficiency.", 
        "So for majority-- by the way, we can do that efficiently.", 
        "Let me not worry about that for now,", 
        "and let me focus on this worst case error model.", 
        "The setting in which we focus on random errors, for some reason,", 
        "is often put under a different field.", 
        "A field called information theory.", 
        "Of course, they are both reasonable ways of modeling", 
        "what happens, but the study of random errors", 
        "will be in a different part of the class.", 
        "So I'll talk about worst case errors, and for now,", 
        "without efficiency.", 
        "When we talk about fault-tolerant", 
        "in quantum computing, we will return to efficiency.", 
        "But for now, let me not worry about that.", 
        "So this let's us simplify things a little bit.", 
        "Instead of talking about the encoding and decoding maps,", 
        "we can just talk about the set of code words.", 
        "", 
        "So C is a set of code words, and just", 
        "the image of the encoding map.", 
        "So with some subset of n-bit strings with size 2 to the k.", 
        "", 
        "So you can think of, if this is the set of all strings,", 
        "these might be my code words.", 
        "Now if there is some error, I flip a few bits,", 
        "let's say I move to some nearby point here.", 
        "The decoding map is going to be look for the nearest code word.", 
        "", 
        "And so this is something which might be computationally", 
        "inefficient, but it's kind of without loss of generality", 
        "in terms of what the optimal decoder is.", 
        "And I'll say a little bit more about that in a minute.", 
        "So to decode x, we just output the nearest code word.", 
        "", 
        "And so, let me say what I mean by nearest.", 
        "", 
        "The nearest code word between the distance", 
        "between x and y code words--", 
        "[INAUDIBLE]", 
        "Image.", 
        "The image of the map.", 
        "So the image of a function is the set of things", 
        "that emaps do.", 
        "Thanks.", 
        "Yeah?", 
        "So, why is the size of C not less than or equal to 2", 
        "to the k?", 
        "", 
        "Your encoding map could, in principle, map two strings", 
        "to the same string.", 
        "But if you did that, you would not", 
        "be able to successfully decode because even", 
        "if no noise happened, or whatever noise happened,", 
        "you would not be able to unambiguously figure out", 
        "what string you came from.", 
        "So even though it's not part of the definition", 
        "of an encoding map, if you demand", 
        "that you can correct errors most of the time,", 
        "then that means that e has to be injected.", 
        "Yeah.", 
        "Thanks.", 
        "I sort of took that for granted.", 
        "OK.", 
        "So we talked about norms before, let me mention now", 
        "one more distance measure.", 
        "And the distance between two bit strings", 
        "will just be the number of positions on which they differ.", 
        "", 
        "So that's actually the one norm difference", 
        "between these two vectors.", 
        "So these are vectors of zeros and ones,", 
        "the one norm just adds up the number", 
        "of positions where they differ.", 
        "This is also sometimes called the Hamming distance.", 
        "Let me mention, by the way, I introduced the L1 and S1 norm.", 
        "Usually people just write 1 to mean either L1 or S1,", 
        "depending on context.", 
        "So for vectors it means one norm,", 
        "for matrices that means S1.", 
        "Usually the context is clear enough", 
        "that we can just write the number 1,", 
        "or for p norms to write a p. et cetera.", 
        "OK.", 
        "So to decode, we find the code word", 
        "that we can reach by flipping the fewest number of bits.", 
        "", 
        "And for this worst case error model,", 
        "this is without loss of generality.", 
        "And what's nice about this, is now", 
        "we don't have to specify a decoder,", 
        "and we have a very simple way of describing the error correcting", 
        "properties of this code.", 
        "So the code performance--", 
        "let me say the error correcting performance--", 
        "", 
        "it only depends on one parameter, at least", 
        "in the worst case, which is called the code distance.", 
        "", 
        "We call this d, and it's defined to be", 
        "the minimum distance between any two distinct code words.", 
        "So the minimum distance between x", 
        "and y, where x is not equal to y, and x and y", 
        "are both code words.", 
        "So you look at these code words, you check all their pairwise", 
        "distances, whatever the closest two code words", 
        "are, that is the distance of the code.", 
        "", 
        "So the biggest that can be is n, right?", 
        "Because two strings are at most distance n apart,", 
        "and that's what we get for the repetition code.", 
        "That's the way to correct the most errors.", 
        "Of course, you do that at a cost of not encoding very many bits.", 
        "But if all you care about is really protecting one bit,", 
        "repetition code is the best way to go.", 
        "", 
        "In fact, if you wanted a simple answer of why it's harder", 
        "to build quantum computers than classical computers,", 
        "I would argue that one of the central difficulties", 
        "is that the repetition code works for classical information", 
        "and not for quantum information.", 
        "So we'll return to this later when", 
        "we talk about quantum information,", 
        "but classically, the repetition code", 
        "is arguably what we use at the lowest level.", 
        "In a transistor-- or maybe above a transistor,", 
        "you have a bi-stable flip-flop, you", 
        "have current going either one direction or another direction.", 
        "That current is made up of millions or billions", 
        "of electrons.", 
        "And so that's like a giant repetition code.", 
        "Zero is encoded in billions of electrons going one way,", 
        "a 1 is encoded in billions of electrons going the other way.", 
        "And the way the circuit works is it's", 
        "measuring voltages, which are essentially", 
        "like little majorities.", 
        "The voltages are kind of this aggregate property of which way", 
        "the electrons are flowing, and it's measuring,", 
        "are the majority of electrons going this way or that way?", 
        "Likewise, in a hard drive cell, you", 
        "have a little bit of magnetic tape--", 
        "like, it's now this with a solid state--", 
        "but if you have a little bit of magnetic tape,", 
        "there's a magnetic field which is also", 
        "kind of the majority of which way", 
        "the local spins are pointing.", 
        "So at a very basic hardware level,", 
        "our classical computers are using repetition codes", 
        "and we take that for granted.", 
        "If you just make the wire fatter,", 
        "it gets more reliable, that's a basic principle", 
        "of classical computing which goes out the window for quantum", 
        "computing.", 
        "Which counts for a lot of the pain in constructing these.", 
        "", 
        "OK.", 
        "So this code distance describes how well classical codes do.", 
        "I've identified these three parameters-- n, k, and d.", 
        "So we say that c is an n k, d code", 
        "if it has the three parameters.", 
        "And so a major opening question is, which triples", 
        "of n, k, and d are possible?", 
        "Even asymptotically, we don't have an exact answer for this.", 
        ""
    ]
}