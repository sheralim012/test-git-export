{
  "start": [
    0, 
    0, 
    3000, 
    15000, 
    23000, 
    27000, 
    28000, 
    34000, 
    36000, 
    38000, 
    40000, 
    41000, 
    43000, 
    46000, 
    50000, 
    53000, 
    58000, 
    68000, 
    74000, 
    76000, 
    78000, 
    84000, 
    90000, 
    94000, 
    99000, 
    105000, 
    107000, 
    109000, 
    111000, 
    115000, 
    130000, 
    134000, 
    142000, 
    147000, 
    150000, 
    154000, 
    156000, 
    158000, 
    159000, 
    162000, 
    163000, 
    164000, 
    168000, 
    170000, 
    173000, 
    176000, 
    178000, 
    181000, 
    183000, 
    186000, 
    192000, 
    195000, 
    198000, 
    201000, 
    203000, 
    205000, 
    221000, 
    224000, 
    231000, 
    234000, 
    236000, 
    239000, 
    241000, 
    243000, 
    258000, 
    267000, 
    271000, 
    285000, 
    289000, 
    292000, 
    295000, 
    298000, 
    301000, 
    303000, 
    306000, 
    308000, 
    311000, 
    315000, 
    318000
  ], 
  "end": [
    0, 
    3000, 
    15000, 
    23000, 
    27000, 
    28000, 
    34000, 
    36000, 
    38000, 
    40000, 
    41000, 
    43000, 
    46000, 
    50000, 
    53000, 
    58000, 
    68000, 
    74000, 
    76000, 
    78000, 
    84000, 
    90000, 
    94000, 
    99000, 
    105000, 
    107000, 
    109000, 
    111000, 
    115000, 
    130000, 
    134000, 
    142000, 
    147000, 
    150000, 
    154000, 
    156000, 
    158000, 
    159000, 
    162000, 
    163000, 
    164000, 
    168000, 
    170000, 
    173000, 
    176000, 
    178000, 
    181000, 
    183000, 
    186000, 
    192000, 
    195000, 
    198000, 
    201000, 
    203000, 
    205000, 
    221000, 
    224000, 
    231000, 
    234000, 
    236000, 
    239000, 
    241000, 
    243000, 
    258000, 
    267000, 
    271000, 
    285000, 
    289000, 
    292000, 
    295000, 
    298000, 
    301000, 
    303000, 
    306000, 
    308000, 
    311000, 
    315000, 
    318000, 
    319000
  ], 
  "text": [
    "", 
    "I claim that if phi has distance d,", 
    "it can correct up to d minus 1 over 2 errors", 
    "and detect up to d minus 1 errors.", 
    "", 
    "So-- one sec.", 
    "So what I mean by correct is in the usual sense of I encode it,", 
    "there's noise, which means worst case", 
    "errors on that many positions, and then I decode,", 
    "and I get the right answer.", 
    "Worse case, there's no probabilities.", 
    "I always get the right answer.", 
    "Detecting is something I've not formally defined.", 
    "But it just means I can't answer yes or no,", 
    "did any noise happen.", 
    "And that just means is my thing no longer a code word.", 
    "For this claim, so detecting I'm just given,", 
    "let's say x tilde, which is x plus e.", 
    "x is a code word.", 
    "e is an error.", 
    "", 
    "And I guess I should have said this.", 
    "", 
    "We'll take all of this mod 2, so I can use a--", 
    "I can say that if I start with bit one, and I have a 0--", 
    "the errors are either 0 or 1.", 
    "0 means no error in that location.", 
    "1 means I do have an error in that location.", 
    "", 
    "So given this, I just want to know is e equal to 0 or not.", 
    "Did an error happen, or did no error happen?", 
    "And if I'm promised that the hamming weight of e", 
    "is at most d minus 1, then what that means is", 
    "if I start from one of these code words,", 
    "I'm going to be within a ball that doesn't", 
    "include any other code word.", 
    "To go from one code word to another one,", 
    "I need to move a distance d, but I'm", 
    "promised I'm going to have some number of errors.", 
    "It could be 0.", 
    "It could be 1.", 
    "It could be 2, up to d minus 1, but it will not be d or more.", 
    "So that means if I start from one code word,", 
    "I cannot reach any other code word.", 
    "So to detect if an error happens,", 
    "I could just say if I'm at a code word,", 
    "I know that no error happened.", 
    "If I'm not at a code word, I, of course,", 
    "know that an error did happen.", 
    "So I can argue that I can detect up to d minus 1 errors.", 
    "If I have more errors, so if I have d bit flips,", 
    "then I can go from one valid code over to another one.", 
    "And then, I have no idea which one I started with.", 
    "So in that case, I cannot detect.", 
    "There can be undetectable errors.", 
    "So I can detect up to d minus 1, and d is undetectable.", 
    "And then a subtlety here I want you to appreciate,", 
    "which is I'm saying I will detect up to d minus 1 errors.", 
    "But really my detection scheme, the way", 
    "it works is I choose a family of errors,", 
    "say everything up to d minus 1, and then I", 
    "have a detection scheme, and then", 
    "I argue that it works for all errors.", 
    "So given a family of errors, say less than d minus 1 locations,", 
    "there exists a detection scheme, which is check", 
    "if x tilde is a code word.", 
    "And then I argue that this works for all errors in that family.", 
    "", 
    "So it's just important to keep in mind", 
    "what it means to detect or correct some errors.", 
    "There's always implicitly some family of errors.", 
    "And I'm designing my recovery or detection scheme", 
    "against that family of errors, and then I", 
    "argue that it works for all areas in that family.", 
    "And the reason I'm kind of belaboring this", 
    "is because we'll go through the same thing for quantum codes,", 
    "and it will look strange if you don't map it back", 
    "to the analog for classical codes.", 
    ""
  ]
}