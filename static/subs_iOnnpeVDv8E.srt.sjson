{
  "start": [
    0, 
    0, 
    2000, 
    5000, 
    6000, 
    10000, 
    13000, 
    15000, 
    18000, 
    19000, 
    24000, 
    26000, 
    28000, 
    30000, 
    32000, 
    33000, 
    35000, 
    38000, 
    39000, 
    43000, 
    46000, 
    50000, 
    51000, 
    58000, 
    60000, 
    65000, 
    68000, 
    69000, 
    72000, 
    75000, 
    76000, 
    78000, 
    82000, 
    84000, 
    87000, 
    89000, 
    92000, 
    104000, 
    107000, 
    122000, 
    139000, 
    140000, 
    142000, 
    147000, 
    151000, 
    156000, 
    160000, 
    161000, 
    164000, 
    166000, 
    170000, 
    173000, 
    185000, 
    189000, 
    191000, 
    192000, 
    194000, 
    195000, 
    197000, 
    200000, 
    204000, 
    206000, 
    207000, 
    209000, 
    212000, 
    214000, 
    216000, 
    221000, 
    224000, 
    226000, 
    227000, 
    230000, 
    232000, 
    236000, 
    239000, 
    242000, 
    244000, 
    254000, 
    256000, 
    257000, 
    260000, 
    263000, 
    266000, 
    267000, 
    268000, 
    271000, 
    274000, 
    278000, 
    281000, 
    283000, 
    287000, 
    288000, 
    301000, 
    311000, 
    314000, 
    318000, 
    320000, 
    321000, 
    323000, 
    325000, 
    328000, 
    329000, 
    331000, 
    337000, 
    341000, 
    344000, 
    347000, 
    351000, 
    353000, 
    355000, 
    358000, 
    361000, 
    365000, 
    368000, 
    371000, 
    376000, 
    379000, 
    382000, 
    385000, 
    388000, 
    390000, 
    391000, 
    394000, 
    396000, 
    399000, 
    401000, 
    403000, 
    404000, 
    406000, 
    409000, 
    413000, 
    419000, 
    421000, 
    424000, 
    427000, 
    428000, 
    431000
  ], 
  "end": [
    0, 
    2000, 
    5000, 
    6000, 
    10000, 
    13000, 
    15000, 
    18000, 
    19000, 
    24000, 
    26000, 
    28000, 
    30000, 
    32000, 
    33000, 
    35000, 
    38000, 
    39000, 
    43000, 
    46000, 
    50000, 
    51000, 
    58000, 
    60000, 
    65000, 
    68000, 
    69000, 
    72000, 
    75000, 
    76000, 
    78000, 
    82000, 
    84000, 
    87000, 
    89000, 
    92000, 
    104000, 
    107000, 
    122000, 
    139000, 
    140000, 
    142000, 
    147000, 
    151000, 
    156000, 
    160000, 
    161000, 
    164000, 
    166000, 
    170000, 
    173000, 
    185000, 
    189000, 
    191000, 
    192000, 
    194000, 
    195000, 
    197000, 
    200000, 
    204000, 
    206000, 
    207000, 
    209000, 
    212000, 
    214000, 
    216000, 
    221000, 
    224000, 
    226000, 
    227000, 
    230000, 
    232000, 
    236000, 
    239000, 
    242000, 
    244000, 
    254000, 
    256000, 
    257000, 
    260000, 
    263000, 
    266000, 
    267000, 
    268000, 
    271000, 
    274000, 
    278000, 
    281000, 
    283000, 
    287000, 
    288000, 
    301000, 
    311000, 
    314000, 
    318000, 
    320000, 
    321000, 
    323000, 
    325000, 
    328000, 
    329000, 
    331000, 
    337000, 
    341000, 
    344000, 
    347000, 
    351000, 
    353000, 
    355000, 
    358000, 
    361000, 
    365000, 
    368000, 
    371000, 
    376000, 
    379000, 
    382000, 
    385000, 
    388000, 
    390000, 
    391000, 
    394000, 
    396000, 
    399000, 
    401000, 
    403000, 
    404000, 
    406000, 
    409000, 
    413000, 
    419000, 
    421000, 
    424000, 
    427000, 
    428000, 
    431000, 
    431000
  ], 
  "text": [
    "", 
    "I want to be a little bit more clear about errors", 
    "being correctable because this condition is a little bit", 
    "hard to check, right?", 
    "You might worry that in a classical code", 
    "it's pretty easy to check whether errors are correctable,", 
    "especially these low-weight errors.", 
    "I can just check how close are two code words.", 
    "And we saw on the classical case that", 
    "gave us a precise characterization of up to what", 
    "weight of errors I can correct.", 
    "Here, the only definition I've given", 
    "you is one where you have to come up with a decoding", 
    "map yourself.", 
    "And so at that point, by the time", 
    "you can come up with the decoding map you probably", 
    "already have a pretty good understanding of how", 
    "the code works.", 
    "So is there some more simple characterization we can give", 
    "of when the decoding map exists other", 
    "than it exists when you can find it and it works?", 
    "So that's what I want to talk about.", 
    "Now, these are called the quantum error correction", 
    "conditions.", 
    "And remember in the classical case", 
    "the conditions were basically if I have", 
    "some set of allowed errors--", 
    "let's say I flip up to l bits--", 
    "if I can map two codewords to the same points,", 
    "then I'm toast.", 
    "I cannot correct that error.", 
    "If I cannot map two codewords to the same place, I'm happy.", 
    "I can correct the errors.", 
    "So that's basically what will happen in the quantum case.", 
    "We just happen to be a little careful because these are now", 
    "vectors and not points.", 
    "So we say that s is correctable, or let me let me rephrase that.", 
    "", 
    "Code c corrects a set of errors s if and only if for any pair", 
    "of codewords and for any pair of errors they cannot be mapped", 
    "not only to the same point--", 
    "oh, sorry.", 
    "And let me start by demanding that code words be", 
    "orthogonal so they're perfectly distinguishable.", 
    "Then these errors should not only not", 
    "map them to the same point, they shouldn't even ruin their", 
    "they're orthogonality.", 
    "They shouldn't even map them to nonorthogonal vectors.", 
    "So if I have psi 1 and psi 2 like these, and e1 and e2", 
    "to are errors, states are orthogonal,", 
    "they should remain orthogonal after the errors strike.", 
    "So in other words, so this state is what psi 1 gets mapped to.", 
    "This is the bra of what psi 2 gets mapped to.", 
    "Those states should remain orthogonal.", 
    "I'm calling them states, by the way.", 
    "They could be sub-normalized, right?", 
    "These don't have to be unit vectors.", 
    "But whatever states they're proportional to", 
    "should be orthogonal.", 
    "OK it's just a quantum analog of--", 
    "if I'm perfectly distinguishable before,", 
    "I should remain perfectly distinguishable", 
    "after correctable noise.", 
    "", 
    "I'm making it sound intuitive, but this is a deeply", 
    "non-trivial statement.", 
    "", 
    "And I'm not going to prove it because a proof takes a while", 
    "and it was in 8370.", 
    "And I think you can understand codes", 
    "without knowing the proof.", 
    "But the proof is also an important thing to know.", 
    "So if you didn't take 8370 last year,", 
    "I would encourage that you look at the video from last year", 
    "and/or read the corresponding parts of Nielsen and Chuang,", 
    "which gives the proof of this.", 
    "So proof in 8370 or Nielsen and Chuang.", 
    "However, I'm not going to reference the proof", 
    "on problem sets.", 
    "It's not a thing we will directly make use of.", 
    "It uses the polar decomposition, some nice facts", 
    "about linear algebra.", 
    "But yeah.", 
    "I will not get into the proof further.", 
    "", 
    "I do want to give one equivalent way of thinking about this,", 
    "which maybe gives you a first step", 
    "in the direction of the proof.", 
    "I should say, what I mean by correct a set of errors", 
    "is there exists a decoding map that works, OK?", 
    "I should say this.", 
    "So correct means there exists decoding and recovery", 
    "maps that perfectly recover the original information, OK?", 
    "So what's nice about this condition", 
    "is that you can state it without any reference to decoding map.", 
    "Maybe it's not easy to check always.", 
    "That may or may not be true.", 
    "But you don't need to come up with a decoding map", 
    "in order to check this.", 
    "If the condition is satisfied, you know such a map exists.", 
    "And in fact, the proof even gives you", 
    "a prescription for finding it.", 
    "", 
    "So actually, there is one more thing", 
    "I want to say about these conditions, which is a little", 
    "bit subtle, which is, people often", 
    "talk about a code in saying oh, this error is", 
    "correctable by the code, and that error is not", 
    "corrected by the code.", 
    "And that is a dangerous way of thinking.", 
    "So suppose there's some error that", 
    "seems very hard to correct, like I flipped 17 qubits with x's", 
    "and I apply a bunch of z's to other qubits.", 
    "If it's any single unitary error,", 
    "if I knew what the error was, I could correct it, right?", 
    "The issue is really dealing with sets of errors.", 
    "So whenever I just say a code, correct something,", 
    "I'm always saying it corrects a set of possible errors.", 
    "And that's because if I knew what the particular error was,", 
    "I could tailor the decoding map to that,", 
    "and that would be cheating.", 
    "The decoding map has to work precisely", 
    "because I don't know what the error is.", 
    "And so that's why the order of quantifiers is,", 
    "I achieve my code first.", 
    "Then there's some set of errors.", 
    "And then I choose the decoding map", 
    "based on that set of errors.", 
    "And then I'm handed one particular realization", 
    "of errors from that set, and by decoding map has to handle it.", 
    "So as we go on, just remember that we talk about", 
    "whether a set of errors is correctable.", 
    "We might be sloppy and say, does this error lie", 
    "within the decorrectable set or not.", 
    "But that's only after we've already fixed", 
    "a particular correctable set.", 
    ""
  ]
}