{
  "start": [
    0, 
    0, 
    0, 
    2000, 
    13000, 
    20000, 
    22000, 
    25000, 
    28000, 
    33000, 
    37000, 
    39000, 
    42000, 
    50000, 
    54000, 
    61000, 
    65000, 
    67000, 
    70000, 
    75000, 
    77000, 
    92000, 
    94000, 
    95000, 
    97000, 
    112000, 
    117000, 
    119000, 
    123000, 
    126000, 
    127000, 
    130000, 
    131000, 
    133000, 
    134000, 
    136000, 
    143000, 
    146000, 
    147000, 
    149000, 
    156000, 
    164000, 
    166000, 
    170000, 
    171000, 
    173000, 
    176000, 
    177000, 
    179000, 
    183000, 
    185000, 
    187000, 
    189000, 
    190000, 
    193000, 
    194000, 
    198000, 
    200000, 
    205000, 
    208000, 
    213000, 
    215000, 
    217000, 
    220000, 
    223000, 
    226000, 
    228000, 
    230000, 
    233000, 
    236000, 
    238000, 
    242000, 
    245000, 
    248000, 
    253000, 
    256000, 
    257000, 
    261000, 
    263000
  ], 
  "end": [
    0, 
    0, 
    2000, 
    13000, 
    20000, 
    22000, 
    25000, 
    28000, 
    33000, 
    37000, 
    39000, 
    42000, 
    50000, 
    54000, 
    61000, 
    65000, 
    67000, 
    70000, 
    75000, 
    77000, 
    92000, 
    94000, 
    95000, 
    97000, 
    112000, 
    117000, 
    119000, 
    123000, 
    126000, 
    127000, 
    130000, 
    131000, 
    133000, 
    134000, 
    136000, 
    143000, 
    146000, 
    147000, 
    149000, 
    156000, 
    164000, 
    166000, 
    170000, 
    171000, 
    173000, 
    176000, 
    177000, 
    179000, 
    183000, 
    185000, 
    187000, 
    189000, 
    190000, 
    193000, 
    194000, 
    198000, 
    200000, 
    205000, 
    208000, 
    213000, 
    215000, 
    217000, 
    220000, 
    223000, 
    226000, 
    228000, 
    230000, 
    233000, 
    236000, 
    238000, 
    242000, 
    245000, 
    248000, 
    253000, 
    256000, 
    257000, 
    261000, 
    263000, 
    264000
  ], 
  "text": [
    "", 
    "All right.", 
    "Let me begin by talking about classical codes.", 
    "The way they work is that there is an encoding map which,", 
    "let's say it takes k bits that you want to protect,", 
    "maps them into n bits that you're", 
    "going to use to encode them.", 
    "So usually, so ng bigger than k, because you're", 
    "adding some redundancy in order to protect the information,", 
    "then there'll be some noise process, which we", 
    "would like to protect against.", 
    "And there's a few different models for the noise.", 
    "So it could be one model is that the noise is random.", 
    "", 
    "So for example, we could flip each bit", 
    "with independent probability p.", 
    "So each bit, you know, is either probability", 
    "p flipped, 1 minus p left alone, do that independently", 
    "for each bit, or, we could also consider worst-case noise.", 
    "", 
    "So, for example, any error on, up to l positions.", 
    "So those are the types of noise that we'd", 
    "like to guard against.", 
    "", 
    "And then, in the end, we do a decoding map,", 
    "which takes our corrupted code word, so we have n bit string,", 
    "some noise happens to this n bit string,", 
    "we get an n bit string which has,", 
    "you know, the encoding plus noise.", 
    "And we'd like to decode it.", 
    "In other words, infer the original message.", 
    "OK?", 
    "So that's the structure of a classical error correcting", 
    "code.", 
    "", 
    "And you almost always have this model for a code.", 
    "Then, we would have liked to have some conditions.", 
    "We'd like to say that it does--", 
    "it has some properties.", 
    "Crucially, it should correct, depending on this model,", 
    "either most, or all errors, right?", 
    "So if you have random noise, like I", 
    "flip each bit with probability p, any pattern of bit flips", 
    "is possible.", 
    "But some are very unlikely.", 
    "So I would just like to correct the most likely patterns of bit", 
    "flips.", 
    "Maybe that the chance that there's an uncorrected error", 
    "should be less 10 to the minus 6, then I'm happy.", 
    "In the worst case model, I'm not modeling any probabilities.", 
    "I'm just saying, here's a set of errors.", 
    "I want to make sure if anything in the set happens,", 
    "I'm able to correct it.", 
    "In that case, you have to correct all errors in the set.", 
    "Right?", 
    "Whichever error happens, you can correct it.", 
    "So those are the basic requirements for a code.", 
    "", 
    "There are many optional extras that we'd like to consider.", 
    "", 
    "Computational efficiency is probably", 
    "one of the biggest ones, so we'd like", 
    "to be able to do the encoding in a computationally-efficient", 
    "way, do the decoding in an efficient way.", 
    "What efficient is might depend on our model, right?", 
    "So it depends, if we have a classical computer,", 
    "efficient might mean it doesn't run in too much time.", 
    "Later, we'll talk about quantum codes,", 
    "and efficient there might mean I only make local measurements.", 
    "I don't have to entangle them with acute bits,", 
    "the acute bits are very far away, in order to decode it.", 
    "So efficiency is a long story, which I will", 
    "I will not get into right now.", 
    "But it's definitely one other big consideration.", 
    "And, you know, it's a big field.", 
    "There are other considerations as well,", 
    "but this is kind of the very high-level picture", 
    "of classical codes.", 
    ""
  ]
}